   1               		.file	"motor.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__RAMPZ__ = 0x3b
   6               	__CCP__ = 0x34
   7               	__tmp_reg__ = 0
   8               	__zero_reg__ = 1
   9               		.text
  10               	.Ltext0:
  11               		.cfi_sections	.debug_frame
  12               		.section	.text.stopMove,"ax",@progbits
  13               	.global	stopMove
  15               	stopMove:
  16               	.LFB41:
  17               		.file 1 "../src/motor.c"
   1:../src/motor.c **** #include "motor.h"
   2:../src/motor.c **** 
   3:../src/motor.c **** static volatile uint8_t motor_status;
   4:../src/motor.c **** static volatile Task_t* current_motor_task;
   5:../src/motor.c **** 
   6:../src/motor.c **** static int16_t motor_on_time;
   7:../src/motor.c **** static int16_t motor_off_time;
   8:../src/motor.c **** 
   9:../src/motor.c **** static inline void motor_forward(uint8_t num)
  10:../src/motor.c **** {
  11:../src/motor.c **** 	switch(num)
  12:../src/motor.c **** 	{
  13:../src/motor.c **** 		#ifdef AUDIO_DROPLET
  14:../src/motor.c **** 		case 0: printf_P(PSTR("ERROR! motor_fw called with num=0\r\n")); break;
  15:../src/motor.c **** 		#else
  16:../src/motor.c **** 		case 0: TCC0.CTRLB |= TC0_CCBEN_bm; TCC0.CTRLC = 0; TCC0.CTRLA = TC_CLKSEL_DIV1024_gc; break;
  17:../src/motor.c **** 		#endif
  18:../src/motor.c **** 		case 1: TCC1.CTRLB |= TC1_CCBEN_bm; TCC1.CTRLC = 0; TCC1.CTRLA = TC_CLKSEL_DIV1024_gc; break;
  19:../src/motor.c **** 		case 2: TCD0.CTRLB |= TC0_CCBEN_bm; TCD0.CTRLC = 0; TCD0.CTRLA = TC_CLKSEL_DIV1024_gc; break;
  20:../src/motor.c **** 	}
  21:../src/motor.c **** }
  22:../src/motor.c **** 
  23:../src/motor.c **** static inline void motor_backward(uint8_t num)
  24:../src/motor.c **** {
  25:../src/motor.c **** 	switch(num)
  26:../src/motor.c **** 	{
  27:../src/motor.c **** 		#ifdef AUDIO_DROPLET
  28:../src/motor.c **** 		case 0: printf_P(PSTR("ERROR! motor_bw called with num=0\r\n")); break;
  29:../src/motor.c **** 		#else
  30:../src/motor.c **** 		case 0: TCC0.CTRLB |= TC0_CCAEN_bm; TCC0.CTRLC = 0; TCC0.CTRLA = TC_CLKSEL_DIV1024_gc; break;
  31:../src/motor.c **** 		#endif
  32:../src/motor.c **** 		case 1: TCC1.CTRLB |= TC1_CCAEN_bm; TCC1.CTRLC = 0; TCC1.CTRLA = TC_CLKSEL_DIV1024_gc; break;
  33:../src/motor.c **** 		case 2: TCD0.CTRLB |= TC0_CCAEN_bm; TCD0.CTRLC = 0; TCD0.CTRLA = TC_CLKSEL_DIV1024_gc; break;
  34:../src/motor.c **** 	}
  35:../src/motor.c **** }
  36:../src/motor.c **** 
  37:../src/motor.c **** 
  38:../src/motor.c **** void motorInit()
  39:../src/motor.c **** {
  40:../src/motor.c **** 	#ifdef AUDIO_DROPLET
  41:../src/motor.c **** 		PORTC.DIRSET = PIN4_bm | PIN5_bm;
  42:../src/motor.c **** 	#else
  43:../src/motor.c **** 		PORTC.DIRSET = PIN0_bm | PIN1_bm | PIN4_bm | PIN5_bm;
  44:../src/motor.c **** 	#endif
  45:../src/motor.c **** 	PORTD.DIRSET = PIN0_bm | PIN1_bm; 
  46:../src/motor.c **** 
  47:../src/motor.c **** 	#ifndef AUDIO_DROPLET
  48:../src/motor.c **** 		TCC0.CTRLA = TC_CLKSEL_OFF_gc;
  49:../src/motor.c **** 		TCC0.CTRLB = TC_WGMODE_SS_gc;
  50:../src/motor.c **** 	#endif
  51:../src/motor.c **** 	
  52:../src/motor.c ****     TCC1.CTRLA = TC_CLKSEL_OFF_gc;
  53:../src/motor.c ****     TCC1.CTRLB = TC_WGMODE_SS_gc;
  54:../src/motor.c **** 
  55:../src/motor.c ****     TCD0.CTRLA = TC_CLKSEL_OFF_gc;
  56:../src/motor.c ****     TCD0.CTRLB = TC_WGMODE_SS_gc;  
  57:../src/motor.c **** 	
  58:../src/motor.c **** 	#ifndef AUDIO_DROPLET
  59:../src/motor.c **** 	PORTC.PIN0CTRL = PORT_INVEN_bm;
  60:../src/motor.c **** 	PORTC.PIN1CTRL = PORT_INVEN_bm;
  61:../src/motor.c **** 	#endif
  62:../src/motor.c **** 	PORTC.PIN4CTRL = PORT_INVEN_bm;
  63:../src/motor.c **** 	PORTC.PIN5CTRL = PORT_INVEN_bm;
  64:../src/motor.c **** 	PORTD.PIN0CTRL = PORT_INVEN_bm;
  65:../src/motor.c **** 	PORTD.PIN1CTRL = PORT_INVEN_bm;
  66:../src/motor.c **** 	
  67:../src/motor.c **** 	#ifndef AUDIO_DROPLET
  68:../src/motor.c **** 	PORTC.OUTCLR = PIN0_bm | PIN1_bm;
  69:../src/motor.c **** 	#endif
  70:../src/motor.c **** 	PORTC.OUTCLR = PIN4_bm | PIN5_bm;
  71:../src/motor.c **** 	PORTD.OUTCLR = PIN0_bm | PIN1_bm;
  72:../src/motor.c **** 
  73:../src/motor.c **** 	motor_status = 0;
  74:../src/motor.c **** 
  75:../src/motor.c **** 	motor_on_time = MOTOR_ON_TIME;
  76:../src/motor.c **** 	motor_off_time = MOTOR_OFF_TIME;
  77:../src/motor.c **** 	
  78:../src/motor.c **** 	readMotorSettings();
  79:../src/motor.c **** }
  80:../src/motor.c **** 
  81:../src/motor.c **** uint8_t moveSteps(uint8_t direction, uint16_t num_steps)
  82:../src/motor.c **** {
  83:../src/motor.c **** 	#ifdef AUDIO_DROPLET
  84:../src/motor.c **** 		motorAdjusts[direction][0]=0;
  85:../src/motor.c **** 	#endif
  86:../src/motor.c **** 	if(isMoving()>=0) return 0;
  87:../src/motor.c **** 	motor_status = MOTOR_STATUS_ON | (direction & MOTOR_STATUS_DIRECTION);
  88:../src/motor.c **** 	
  89:../src/motor.c **** 	uint16_t mot_durs[3]; //This is how long we want each motor to be on for.
  90:../src/motor.c **** 	int8_t mot_dirs[3]; //This is what direction we want each motor to spin in. 1: CCW, -1: CW, 0: No 
  91:../src/motor.c **** 	uint16_t total_time = 0; //This is the total length of a step, and will be the period of the PWM g
  92:../src/motor.c **** 	
  93:../src/motor.c **** 	for(uint8_t mot=0 ; mot<3 ; mot++)
  94:../src/motor.c **** 	{	
  95:../src/motor.c **** 		if(motorAdjusts[direction][mot]==0)
  96:../src/motor.c **** 		{
  97:../src/motor.c **** 			mot_durs[mot] = 0;
  98:../src/motor.c **** 			mot_dirs[mot] = 0;
  99:../src/motor.c **** 			continue;
 100:../src/motor.c **** 		}
 101:../src/motor.c **** 		else
 102:../src/motor.c **** 		{
 103:../src/motor.c **** 			mot_durs[mot] = 32*motor_on_time + abs(motorAdjusts[direction][mot]);			
 104:../src/motor.c **** 			mot_dirs[mot] = ((((motorAdjusts[direction][mot]>>15)&0x1)*-2)+1)/**motor_signs[direction][mot]*
 105:../src/motor.c **** 			total_time += mot_durs[mot] + 32*motor_off_time;
 106:../src/motor.c **** 		}
 107:../src/motor.c **** 	}
 108:../src/motor.c **** 	//printf("Moving in dir: %hu for %u steps. Mot_durs: {%u, %u, %u}. Total_time: %u.\r\n",direction,
 109:../src/motor.c **** 	//printf("Mot_dirs: {%hd, %hd, %hd}.\r\n", mot_dirs[0], mot_dirs[1], mot_dirs[2]);
 110:../src/motor.c **** 
 111:../src/motor.c **** 	#ifdef AUDIO_DROPLET
 112:../src/motor.c **** 		TCC1.PER = TCD0.PER = total_time; 
 113:../src/motor.c **** 		TCC1.CCA = TCC1.CCB = mot_durs[1]; //motor 1
 114:../src/motor.c **** 		TCD0.CCA = TCD0.CCB = mot_durs[2]; //motor 2
 115:../src/motor.c **** 	#else
 116:../src/motor.c **** 		TCC0.PER = TCC1.PER = TCD0.PER = total_time;
 117:../src/motor.c **** 		TCC0.CCA = TCC0.CCB = mot_durs[0]; //motor 0
 118:../src/motor.c **** 		TCC1.CCA = TCC1.CCB = mot_durs[1]; //motor 1
 119:../src/motor.c **** 		TCD0.CCA = TCD0.CCB = mot_durs[2]; //motor 2
 120:../src/motor.c **** 	#endif
 121:../src/motor.c **** 	
 122:../src/motor.c **** 	uint16_t current_offset = 0;
 123:../src/motor.c **** 	
 124:../src/motor.c **** 	for(uint8_t mot=0 ; mot<3 ; mot++) //This loops sets up the offsets correctly, so that (for exampl
 125:../src/motor.c **** 	{
 126:../src/motor.c **** 		if(mot_durs[mot]==0) continue;
 127:../src/motor.c **** 		switch(mot)
 128:../src/motor.c **** 		{
 129:../src/motor.c **** 			#ifdef AUDIO_DROPLET
 130:../src/motor.c **** 				case 0: printf_P(PSTR("ERROR! In move_steps, mot_durs[0]!=0\r\n")); break;
 131:../src/motor.c **** 			#else
 132:../src/motor.c **** 				case 0: TCC0.CNT = ((total_time - current_offset)%total_time); break;
 133:../src/motor.c **** 			#endif
 134:../src/motor.c **** 			case 1: TCC1.CNT = ((total_time - current_offset)%total_time); break;
 135:../src/motor.c **** 			case 2: TCD0.CNT = ((total_time - current_offset)%total_time); break;
 136:../src/motor.c **** 		}
 137:../src/motor.c **** 		current_offset += mot_durs[mot] + 32*motor_off_time;//If we left the motor on for longer to compe
 138:../src/motor.c **** 	}
 139:../src/motor.c **** 	
 140:../src/motor.c **** 	if(current_offset != total_time) printf_P(PSTR("ERROR: current_offset: %u and total_time: %u not e
 141:../src/motor.c **** 	//printf("Just about to turn on motors: %lu\r\n",get_time());
 142:../src/motor.c **** 	//TCC0.CTRLFSET = TC_TC0_CMD_RESET_gc;
 143:../src/motor.c **** 	//TCC1.CTRLFSET = TC_TC0_CMD_RESET_gc;
 144:../src/motor.c **** 	//TCD0.CTRLFSET = TC_TC0_CMD_RESET_gc;
 145:../src/motor.c **** 
 146:../src/motor.c **** 
 147:../src/motor.c **** 	for(uint8_t mot=0 ; mot<3 ; mot++) 	//Now we just need to tell the motors to go!
 148:../src/motor.c **** 	{
 149:../src/motor.c **** 		if(mot_dirs[mot]<0) motor_backward(mot); 
 150:../src/motor.c **** 		else if(mot_dirs[mot]>0)	motor_forward(mot);
 151:../src/motor.c **** 	}
 152:../src/motor.c **** 	uint32_t total_movement_duration = (((uint32_t)total_time)*((uint32_t)num_steps))/32;
 153:../src/motor.c **** 	//printf("Total duration: %lu ms.\r\n\n",total_movement_duration);
 154:../src/motor.c **** 	current_motor_task = scheduleTask(total_movement_duration, stopMove, NULL);
 155:../src/motor.c **** 	if(current_motor_task==NULL) printf_P(PSTR("Error! Failed to schedule stop_move task."));
 156:../src/motor.c **** 	return 1;
 157:../src/motor.c **** }
 158:../src/motor.c **** 
 159:../src/motor.c **** void walk(uint8_t direction, uint16_t mm)
 160:../src/motor.c **** {
 161:../src/motor.c **** 	uint16_t mm_per_kilostep = getMMperKilostep(direction);
 162:../src/motor.c **** 	if(abs((0xFFFF-((uint32_t)mm_per_kilostep)))<1000){
 163:../src/motor.c **** 		printf_P(PSTR("Error: Don't have calibrated values for this direction.\r\n"));
 164:../src/motor.c **** 		if(direction>5){
 165:../src/motor.c **** 			mm_per_kilostep = 2000;
 166:../src/motor.c **** 		}else{
 167:../src/motor.c **** 			mm_per_kilostep = 600;
 168:../src/motor.c **** 		}
 169:../src/motor.c **** 	}
 170:../src/motor.c **** 	float mm_per_step = (1.0*mm_per_kilostep)/1000.0;
 171:../src/motor.c **** 	float steps = (1.0*mm)/mm_per_step;
 172:../src/motor.c **** 	delayMS(10);
 173:../src/motor.c **** 	printf_P(PSTR("In order to go in direction %hu for %u mm, taking %u steps.\r\n"),direction, mm, (u
 174:../src/motor.c **** 	delayMS(10);
 175:../src/motor.c **** 	moveSteps(direction, (uint16_t)steps);
 176:../src/motor.c **** }
 177:../src/motor.c **** 
 178:../src/motor.c **** void stopMove()
 179:../src/motor.c **** {
  18               		.loc 1 179 0
  19               		.cfi_startproc
  20               	/* prologue: function */
  21               	/* frame size = 0 */
  22               	/* stack size = 0 */
  23               	.L__stack_usage = 0
 180:../src/motor.c **** 	//printf("Stopping.\r\n");
 181:../src/motor.c **** 	
 182:../src/motor.c **** 	#ifndef AUDIO_DROPLET
 183:../src/motor.c **** 		TCC0.CTRLB &= ~(TC0_CCAEN_bm | TC0_CCBEN_bm);
 184:../src/motor.c **** 		TCC0.CTRLA = TC_CLKSEL_OFF_gc;
 185:../src/motor.c **** 	#endif
 186:../src/motor.c **** 	TCC1.CTRLB  &= ~(TC1_CCAEN_bm | TC1_CCBEN_bm);
  24               		.loc 1 186 0
  25 0000 E0E4      		ldi r30,lo8(64)
  26 0002 F8E0      		ldi r31,lo8(8)
  27 0004 8181      		ldd r24,Z+1
  28 0006 8F7C      		andi r24,lo8(-49)
  29 0008 8183      		std Z+1,r24
 187:../src/motor.c **** 	TCC1.CTRLA = TC_CLKSEL_OFF_gc;
  30               		.loc 1 187 0
  31 000a 1082      		st Z,__zero_reg__
 188:../src/motor.c **** 	TCD0.CTRLB  &= ~(TC0_CCAEN_bm | TC0_CCBEN_bm);
  32               		.loc 1 188 0
  33 000c E0E0      		ldi r30,0
  34 000e F9E0      		ldi r31,lo8(9)
  35 0010 8181      		ldd r24,Z+1
  36 0012 8F7C      		andi r24,lo8(-49)
  37 0014 8183      		std Z+1,r24
 189:../src/motor.c **** 	TCD0.CTRLA = TC_CLKSEL_OFF_gc;
  38               		.loc 1 189 0
  39 0016 1082      		st Z,__zero_reg__
 190:../src/motor.c **** 	
 191:../src/motor.c **** 	#ifdef AUDIO_DROPLET
 192:../src/motor.c **** 		PORTC.OUTCLR = PIN4_bm | PIN5_bm;
  40               		.loc 1 192 0
  41 0018 80E3      		ldi r24,lo8(48)
  42 001a 8093 4606 		sts 1606,r24
 193:../src/motor.c **** 	#else
 194:../src/motor.c **** 		PORTC.OUTCLR = PIN0_bm | PIN1_bm | PIN4_bm | PIN5_bm;	
 195:../src/motor.c **** 	#endif	
 196:../src/motor.c **** 	PORTD.OUTCLR = PIN0_bm | PIN1_bm; 
  43               		.loc 1 196 0
  44 001e 83E0      		ldi r24,lo8(3)
  45 0020 8093 6606 		sts 1638,r24
 197:../src/motor.c **** 	
 198:../src/motor.c **** 	motor_status = 0;
  46               		.loc 1 198 0
  47 0024 1092 0000 		sts motor_status,__zero_reg__
 199:../src/motor.c **** 	removeTask((Task_t*)current_motor_task);
  48               		.loc 1 199 0
  49 0028 8091 0000 		lds r24,current_motor_task
  50 002c 9091 0000 		lds r25,current_motor_task+1
  51 0030 0E94 0000 		call removeTask
  52               	.LVL0:
 200:../src/motor.c **** 	current_motor_task = NULL;
  53               		.loc 1 200 0
  54 0034 1092 0000 		sts current_motor_task,__zero_reg__
  55 0038 1092 0000 		sts current_motor_task+1,__zero_reg__
  56 003c 0895      		ret
  57               		.cfi_endproc
  58               	.LFE41:
  60               		.section	.text.moveSteps,"ax",@progbits
  61               	.global	moveSteps
  63               	moveSteps:
  64               	.LFB39:
  82:../src/motor.c **** 	#ifdef AUDIO_DROPLET
  65               		.loc 1 82 0
  66               		.cfi_startproc
  67               	.LVL1:
  68 0000 3F92      		push r3
  69               	.LCFI0:
  70               		.cfi_def_cfa_offset 4
  71               		.cfi_offset 3, -3
  72 0002 4F92      		push r4
  73               	.LCFI1:
  74               		.cfi_def_cfa_offset 5
  75               		.cfi_offset 4, -4
  76 0004 5F92      		push r5
  77               	.LCFI2:
  78               		.cfi_def_cfa_offset 6
  79               		.cfi_offset 5, -5
  80 0006 6F92      		push r6
  81               	.LCFI3:
  82               		.cfi_def_cfa_offset 7
  83               		.cfi_offset 6, -6
  84 0008 7F92      		push r7
  85               	.LCFI4:
  86               		.cfi_def_cfa_offset 8
  87               		.cfi_offset 7, -7
  88 000a 8F92      		push r8
  89               	.LCFI5:
  90               		.cfi_def_cfa_offset 9
  91               		.cfi_offset 8, -8
  92 000c 9F92      		push r9
  93               	.LCFI6:
  94               		.cfi_def_cfa_offset 10
  95               		.cfi_offset 9, -9
  96 000e AF92      		push r10
  97               	.LCFI7:
  98               		.cfi_def_cfa_offset 11
  99               		.cfi_offset 10, -10
 100 0010 BF92      		push r11
 101               	.LCFI8:
 102               		.cfi_def_cfa_offset 12
 103               		.cfi_offset 11, -11
 104 0012 CF92      		push r12
 105               	.LCFI9:
 106               		.cfi_def_cfa_offset 13
 107               		.cfi_offset 12, -12
 108 0014 DF92      		push r13
 109               	.LCFI10:
 110               		.cfi_def_cfa_offset 14
 111               		.cfi_offset 13, -13
 112 0016 EF92      		push r14
 113               	.LCFI11:
 114               		.cfi_def_cfa_offset 15
 115               		.cfi_offset 14, -14
 116 0018 FF92      		push r15
 117               	.LCFI12:
 118               		.cfi_def_cfa_offset 16
 119               		.cfi_offset 15, -15
 120 001a 0F93      		push r16
 121               	.LCFI13:
 122               		.cfi_def_cfa_offset 17
 123               		.cfi_offset 16, -16
 124 001c 1F93      		push r17
 125               	.LCFI14:
 126               		.cfi_def_cfa_offset 18
 127               		.cfi_offset 17, -17
 128 001e CF93      		push r28
 129               	.LCFI15:
 130               		.cfi_def_cfa_offset 19
 131               		.cfi_offset 28, -18
 132 0020 DF93      		push r29
 133               	.LCFI16:
 134               		.cfi_def_cfa_offset 20
 135               		.cfi_offset 29, -19
 136 0022 CDB7      		in r28,__SP_L__
 137 0024 DEB7      		in r29,__SP_H__
 138               	.LCFI17:
 139               		.cfi_def_cfa_register 28
 140 0026 2997      		sbiw r28,9
 141               	.LCFI18:
 142               		.cfi_def_cfa_offset 29
 143 0028 CDBF      		out __SP_L__,r28
 144 002a DEBF      		out __SP_H__,r29
 145               	/* prologue: function */
 146               	/* frame size = 9 */
 147               	/* stack size = 26 */
 148               	.L__stack_usage = 26
  84:../src/motor.c **** 	#endif
 149               		.loc 1 84 0
 150 002c 282F      		mov r18,r24
 151 002e 30E0      		ldi r19,0
 152 0030 D901      		movw r26,r18
 153 0032 AA0F      		lsl r26
 154 0034 BB1F      		rol r27
 155 0036 A20F      		add r26,r18
 156 0038 B31F      		adc r27,r19
 157 003a AA0F      		lsl r26
 158 003c BB1F      		rol r27
 159 003e A050      		subi r26,lo8(-(motorAdjusts))
 160 0040 B040      		sbci r27,hi8(-(motorAdjusts))
 161 0042 1D92      		st X+,__zero_reg__
 162 0044 1C92      		st X,__zero_reg__
 163               	.LBB28:
 164               	.LBB29:
 201:../src/motor.c **** }
 202:../src/motor.c **** 
 203:../src/motor.c **** int8_t isMoving() // returns -1 if droplet is not moving, movement dir otherwise.
 204:../src/motor.c **** {
 205:../src/motor.c **** 	if (motor_status & MOTOR_STATUS_ON){
 165               		.loc 1 205 0
 166 0046 9091 0000 		lds r25,motor_status
 167 004a 97FD      		sbrc r25,7
 168 004c 00C0      		rjmp .L39
 169               	.LBE29:
 170               	.LBE28:
  87:../src/motor.c **** 	
 171               		.loc 1 87 0
 172 004e 982F      		mov r25,r24
 173 0050 9770      		andi r25,lo8(7)
 174 0052 9068      		ori r25,lo8(-128)
 175 0054 9093 0000 		sts motor_status,r25
 176               	.LVL2:
 177 0058 A090 0000 		lds r10,motor_on_time
 178 005c B090 0000 		lds r11,motor_on_time+1
 179 0060 AA0C      		lsl r10
 180 0062 BB1C      		rol r11
 181 0064 A294      		swap r10
 182 0066 B294      		swap r11
 183 0068 30EF      		ldi r19,0xf0
 184 006a B322      		and r11,r19
 185 006c BA24      		eor r11,r10
 186 006e A322      		and r10,r19
 187 0070 BA24      		eor r11,r10
 188               	.LBB31:
 105:../src/motor.c **** 		}
 189               		.loc 1 105 0
 190 0072 8090 0000 		lds r8,motor_off_time
 191 0076 9090 0000 		lds r9,motor_off_time+1
 192 007a 880C      		lsl r8
 193 007c 991C      		rol r9
 194 007e 8294      		swap r8
 195 0080 9294      		swap r9
 196 0082 40EF      		ldi r20,0xf0
 197 0084 9422      		and r9,r20
 198 0086 9824      		eor r9,r8
 199 0088 8422      		and r8,r20
 200 008a 9824      		eor r9,r8
 201 008c 96E0      		ldi r25,lo8(6)
 202 008e 899F      		mul r24,r25
 203 0090 F001      		movw r30,r0
 204 0092 1124      		clr __zero_reg__
 205 0094 CF01      		movw r24,r30
 206               	.LVL3:
 207 0096 8050      		subi r24,lo8(-(motorAdjusts+2))
 208 0098 9040      		sbci r25,hi8(-(motorAdjusts+2))
 209 009a 3C01      		movw r6,r24
 210 009c FE01      		movw r30,r28
 211 009e 3196      		adiw r30,1
 212 00a0 6F01      		movw r12,r30
 213 00a2 7E01      		movw r14,r28
 214 00a4 F7E0      		ldi r31,7
 215 00a6 EF0E      		add r14,r31
 216 00a8 F11C      		adc r15,__zero_reg__
 217 00aa 9701      		movw r18,r14
 218               	.LVL4:
 219 00ac D601      		movw r26,r12
 220 00ae 80E0      		ldi r24,0
 221 00b0 90E0      		ldi r25,0
 222               	.LBE31:
  91:../src/motor.c **** 	
 223               		.loc 1 91 0
 224 00b2 00E0      		ldi r16,0
 225 00b4 10E0      		ldi r17,0
 226               	.LVL5:
 227               	.LBB32:
  95:../src/motor.c **** 		{
 228               		.loc 1 95 0
 229 00b6 0097      		sbiw r24,0
 230 00b8 01F4      		brne .L5
 231               	.L41:
  97:../src/motor.c **** 			mot_dirs[mot] = 0;
 232               		.loc 1 97 0
 233 00ba 1D92      		st X+,__zero_reg__
 234 00bc 1C92      		st X,__zero_reg__
 235 00be 1197      		sbiw r26,1
  98:../src/motor.c **** 			continue;
 236               		.loc 1 98 0
 237 00c0 F901      		movw r30,r18
 238 00c2 1082      		st Z,__zero_reg__
 239 00c4 1296      		adiw r26,2
 240 00c6 2F5F      		subi r18,-1
 241 00c8 3F4F      		sbci r19,-1
  93:../src/motor.c **** 	{	
 242               		.loc 1 93 0
 243 00ca AE15      		cp r26,r14
 244 00cc BF05      		cpc r27,r15
 245 00ce 01F0      		breq .L40
 246               	.L8:
 247 00d0 F301      		movw r30,r6
 248 00d2 8191      		ld r24,Z+
 249 00d4 9191      		ld r25,Z+
 250 00d6 3F01      		movw r6,r30
  95:../src/motor.c **** 		{
 251               		.loc 1 95 0
 252 00d8 0097      		sbiw r24,0
 253 00da 01F0      		breq .L41
 254               	.L5:
 103:../src/motor.c **** 			mot_dirs[mot] = ((((motorAdjusts[direction][mot]>>15)&0x1)*-2)+1)/**motor_signs[direction][mot]*
 255               		.loc 1 103 0
 256 00dc AC01      		movw r20,r24
 257 00de 97FD      		sbrc r25,7
 258 00e0 00C0      		rjmp .L42
 259               	.L7:
 260 00e2 4A0D      		add r20,r10
 261 00e4 5B1D      		adc r21,r11
 262 00e6 4D93      		st X+,r20
 263 00e8 5C93      		st X,r21
 264 00ea 1197      		sbiw r26,1
 104:../src/motor.c **** 			total_time += mot_durs[mot] + 32*motor_off_time;
 265               		.loc 1 104 0
 266 00ec 892F      		mov r24,r25
 267 00ee 880F      		lsl r24
 268 00f0 880B      		sbc r24,r24
 269 00f2 880F      		lsl r24
 270 00f4 8F5F      		subi r24,lo8(-(1))
 271 00f6 F901      		movw r30,r18
 272 00f8 8083      		st Z,r24
 273 00fa 080D      		add r16,r8
 274 00fc 191D      		adc r17,r9
 275               	.LVL6:
 105:../src/motor.c **** 		}
 276               		.loc 1 105 0
 277 00fe 040F      		add r16,r20
 278 0100 151F      		adc r17,r21
 279               	.LVL7:
 280 0102 1296      		adiw r26,2
 281 0104 2F5F      		subi r18,-1
 282 0106 3F4F      		sbci r19,-1
  93:../src/motor.c **** 	{	
 283               		.loc 1 93 0
 284 0108 AE15      		cp r26,r14
 285 010a BF05      		cpc r27,r15
 286 010c 01F4      		brne .L8
 287               	.L40:
 288 010e 3B01      		movw r6,r22
 289               	.LBE32:
 112:../src/motor.c **** 		TCC1.CCA = TCC1.CCB = mot_durs[1]; //motor 1
 290               		.loc 1 112 0
 291 0110 0093 2609 		sts 2342,r16
 292 0114 1093 2709 		sts 2342+1,r17
 293 0118 0093 6608 		sts 2150,r16
 294 011c 1093 6708 		sts 2150+1,r17
 113:../src/motor.c **** 		TCD0.CCA = TCD0.CCB = mot_durs[2]; //motor 2
 295               		.loc 1 113 0
 296 0120 8B81      		ldd r24,Y+3
 297 0122 9C81      		ldd r25,Y+4
 298 0124 8093 6A08 		sts 2154,r24
 299 0128 9093 6B08 		sts 2154+1,r25
 300 012c 8093 6808 		sts 2152,r24
 301 0130 9093 6908 		sts 2152+1,r25
 114:../src/motor.c **** 	#else
 302               		.loc 1 114 0
 303 0134 8D81      		ldd r24,Y+5
 304 0136 9E81      		ldd r25,Y+6
 305 0138 8093 2A09 		sts 2346,r24
 306 013c 9093 2B09 		sts 2346+1,r25
 307 0140 8093 2809 		sts 2344,r24
 308 0144 9093 2909 		sts 2344+1,r25
 309               	.LVL8:
 310               	.LBB33:
 124:../src/motor.c **** 	{
 311               		.loc 1 124 0
 312 0148 312C      		mov r3,__zero_reg__
 313               	.LBE33:
 122:../src/motor.c **** 	
 314               		.loc 1 122 0
 315 014a 812C      		mov r8,__zero_reg__
 316 014c 912C      		mov r9,__zero_reg__
 317               	.LBB34:
 130:../src/motor.c **** 			#else
 318               		.loc 1 130 0
 319 014e F0E0      		ldi r31,lo8(__c.4871)
 320 0150 4F2E      		mov r4,r31
 321 0152 F0E0      		ldi r31,hi8(__c.4871)
 322 0154 5F2E      		mov r5,r31
 323               	.LVL9:
 324               	.L14:
 126:../src/motor.c **** 		switch(mot)
 325               		.loc 1 126 0
 326 0156 F601      		movw r30,r12
 327 0158 A190      		ld r10,Z+
 328 015a B190      		ld r11,Z+
 329 015c 6F01      		movw r12,r30
 330 015e A114      		cp r10,__zero_reg__
 331 0160 B104      		cpc r11,__zero_reg__
 332 0162 01F0      		breq .L9
 127:../src/motor.c **** 		{
 333               		.loc 1 127 0
 334 0164 F1E0      		ldi r31,lo8(1)
 335 0166 3F16      		cp r3,r31
 336 0168 01F4      		brne .+2
 337 016a 00C0      		rjmp .L11
 338 016c 22E0      		ldi r18,lo8(2)
 339 016e 3216      		cp r3,r18
 340 0170 01F4      		brne .+2
 341 0172 00C0      		rjmp .L12
 130:../src/motor.c **** 			#else
 342               		.loc 1 130 0
 343 0174 5F92      		push r5
 344 0176 4F92      		push r4
 345 0178 0E94 0000 		call printf_P
 346               	.LVL10:
 347 017c 0F90      		pop __tmp_reg__
 348 017e 0F90      		pop __tmp_reg__
 349               	.L13:
 350 0180 8091 0000 		lds r24,motor_off_time
 351 0184 9091 0000 		lds r25,motor_off_time+1
 352 0188 880F      		lsl r24
 353 018a 991F      		rol r25
 354 018c 8295      		swap r24
 355 018e 9295      		swap r25
 356 0190 907F      		andi r25,0xf0
 357 0192 9827      		eor r25,r24
 358 0194 807F      		andi r24,0xf0
 359 0196 9827      		eor r25,r24
 360 0198 880E      		add r8,r24
 361 019a 991E      		adc r9,r25
 362               	.LVL11:
 137:../src/motor.c **** 	}
 363               		.loc 1 137 0
 364 019c 8A0C      		add r8,r10
 365 019e 9B1C      		adc r9,r11
 366               	.LVL12:
 367               	.L9:
 124:../src/motor.c **** 	{
 368               		.loc 1 124 0 discriminator 2
 369 01a0 3394      		inc r3
 370               	.LVL13:
 371 01a2 83E0      		ldi r24,lo8(3)
 372 01a4 3812      		cpse r3,r24
 373 01a6 00C0      		rjmp .L14
 374               	.LBE34:
 140:../src/motor.c **** 	//printf("Just about to turn on motors: %lu\r\n",get_time());
 375               		.loc 1 140 0
 376 01a8 0815      		cp r16,r8
 377 01aa 1905      		cpc r17,r9
 378 01ac 01F0      		breq .L15
 140:../src/motor.c **** 	//printf("Just about to turn on motors: %lu\r\n",get_time());
 379               		.loc 1 140 0 is_stmt 0 discriminator 1
 380 01ae 1F93      		push r17
 381 01b0 0F93      		push r16
 382 01b2 9F92      		push r9
 383 01b4 8F92      		push r8
 384 01b6 80E0      		ldi r24,lo8(__c.4879)
 385 01b8 90E0      		ldi r25,hi8(__c.4879)
 386 01ba 9F93      		push r25
 387 01bc 8F93      		push r24
 388 01be 0E94 0000 		call printf_P
 389               	.LVL14:
 390 01c2 0F90      		pop __tmp_reg__
 391 01c4 0F90      		pop __tmp_reg__
 392 01c6 0F90      		pop __tmp_reg__
 393 01c8 0F90      		pop __tmp_reg__
 394 01ca 0F90      		pop __tmp_reg__
 395 01cc 0F90      		pop __tmp_reg__
 396               	.L15:
 397               	.LVL15:
 122:../src/motor.c **** 	
 398               		.loc 1 122 0 is_stmt 1 discriminator 1
 399 01ce C12C      		mov r12,__zero_reg__
 400 01d0 D12C      		mov r13,__zero_reg__
 401               	.LBB35:
 402               	.LBB36:
 403               	.LBB37:
  18:../src/motor.c **** 		case 2: TCD0.CTRLB |= TC0_CCBEN_bm; TCD0.CTRLC = 0; TCD0.CTRLA = TC_CLKSEL_DIV1024_gc; break;
 404               		.loc 1 18 0 discriminator 1
 405 01d2 57E0      		ldi r21,lo8(7)
 406 01d4 552E      		mov r5,r21
  14:../src/motor.c **** 		#else
 407               		.loc 1 14 0 discriminator 1
 408 01d6 60E0      		ldi r22,lo8(__c.4839)
 409 01d8 A62E      		mov r10,r22
 410 01da 60E0      		ldi r22,hi8(__c.4839)
 411 01dc B62E      		mov r11,r22
 412               	.LBE37:
 413               	.LBE36:
 414               	.LBB41:
 415               	.LBB42:
  28:../src/motor.c **** 		#else
 416               		.loc 1 28 0 discriminator 1
 417 01de 70E0      		ldi r23,lo8(__c.4848)
 418 01e0 872E      		mov r8,r23
 419 01e2 70E0      		ldi r23,hi8(__c.4848)
 420 01e4 972E      		mov r9,r23
 421               	.LVL16:
 422               	.L16:
 423 01e6 9C2D      		mov r25,r12
 424               	.LVL17:
 425               	.LBE42:
 426               	.LBE41:
 149:../src/motor.c **** 		else if(mot_dirs[mot]>0)	motor_forward(mot);
 427               		.loc 1 149 0
 428 01e8 F701      		movw r30,r14
 429 01ea 8191      		ld r24,Z+
 430 01ec 7F01      		movw r14,r30
 431 01ee FFEF      		ldi r31,-1
 432 01f0 CF1A      		sub r12,r31
 433 01f2 DF0A      		sbc r13,r31
 434               	.LVL18:
 435 01f4 87FD      		sbrc r24,7
 436 01f6 00C0      		rjmp .L43
 150:../src/motor.c **** 	}
 437               		.loc 1 150 0
 438 01f8 8823      		tst r24
 439 01fa 01F0      		breq .L21
 440               	.LVL19:
 441               	.LBB46:
 442               	.LBB38:
  11:../src/motor.c **** 	{
 443               		.loc 1 11 0
 444 01fc 9130      		cpi r25,lo8(1)
 445 01fe 01F4      		brne .+2
 446 0200 00C0      		rjmp .L25
 447 0202 9230      		cpi r25,lo8(2)
 448 0204 01F0      		breq .+2
 449 0206 00C0      		rjmp .L44
  19:../src/motor.c **** 	}
 450               		.loc 1 19 0
 451 0208 8091 0109 		lds r24,2305
 452 020c 8062      		ori r24,lo8(32)
 453 020e 8093 0109 		sts 2305,r24
 454 0212 1092 0209 		sts 2306,__zero_reg__
 455 0216 87E0      		ldi r24,lo8(7)
 456 0218 8093 0009 		sts 2304,r24
 457 021c 00C0      		rjmp .L23
 458               	.LVL20:
 459               	.L43:
 460               	.LBE38:
 461               	.LBE46:
 462               	.LBB47:
 463               	.LBB43:
  25:../src/motor.c **** 	{
 464               		.loc 1 25 0
 465 021e 9130      		cpi r25,lo8(1)
 466 0220 01F4      		brne .+2
 467 0222 00C0      		rjmp .L19
 468 0224 9230      		cpi r25,lo8(2)
 469 0226 01F4      		brne .+2
 470 0228 00C0      		rjmp .L20
  28:../src/motor.c **** 		#else
 471               		.loc 1 28 0
 472 022a 9F92      		push r9
 473 022c 8F92      		push r8
 474 022e 0E94 0000 		call printf_P
 475               	.LVL21:
 476 0232 0F90      		pop __tmp_reg__
 477 0234 0F90      		pop __tmp_reg__
 478               	.LVL22:
 479               	.L21:
 480               	.LBE43:
 481               	.LBE47:
 147:../src/motor.c **** 	{
 482               		.loc 1 147 0 discriminator 2
 483 0236 23E0      		ldi r18,lo8(3)
 484 0238 C212      		cpse r12,r18
 485 023a 00C0      		rjmp .L16
 486               	.LVL23:
 487               	.L23:
 488               	.LBE35:
 154:../src/motor.c **** 	if(current_motor_task==NULL) printf_P(PSTR("Error! Failed to schedule stop_move task."));
 489               		.loc 1 154 0
 490 023c 9801      		movw r18,r16
 491 023e D301      		movw r26,r6
 492 0240 0E94 0000 		call __umulhisi3
 493 0244 25E0      		ldi r18,5
 494               		1:
 495 0246 9695      		lsr r25
 496 0248 8795      		ror r24
 497 024a 7795      		ror r23
 498 024c 6795      		ror r22
 499 024e 2A95      		dec r18
 500 0250 01F4      		brne 1b
 501               	.LVL24:
 502 0252 20E0      		ldi r18,0
 503 0254 30E0      		ldi r19,0
 504 0256 40E0      		ldi r20,lo8(gs(stopMove))
 505 0258 50E0      		ldi r21,hi8(gs(stopMove))
 506 025a 0E94 0000 		call scheduleTask
 507               	.LVL25:
 508 025e 8093 0000 		sts current_motor_task,r24
 509 0262 9093 0000 		sts current_motor_task+1,r25
 155:../src/motor.c **** 	return 1;
 510               		.loc 1 155 0
 511 0266 892B      		or r24,r25
 512 0268 01F4      		brne .+2
 513 026a 00C0      		rjmp .L29
 156:../src/motor.c **** }
 514               		.loc 1 156 0
 515 026c 81E0      		ldi r24,lo8(1)
 516               	.LVL26:
 517               	.L37:
 518               	/* epilogue start */
 157:../src/motor.c **** 
 519               		.loc 1 157 0
 520 026e 2996      		adiw r28,9
 521 0270 CDBF      		out __SP_L__,r28
 522 0272 DEBF      		out __SP_H__,r29
 523 0274 DF91      		pop r29
 524 0276 CF91      		pop r28
 525 0278 1F91      		pop r17
 526 027a 0F91      		pop r16
 527 027c FF90      		pop r15
 528 027e EF90      		pop r14
 529 0280 DF90      		pop r13
 530 0282 CF90      		pop r12
 531 0284 BF90      		pop r11
 532 0286 AF90      		pop r10
 533 0288 9F90      		pop r9
 534 028a 8F90      		pop r8
 535 028c 7F90      		pop r7
 536 028e 6F90      		pop r6
 537 0290 5F90      		pop r5
 538 0292 4F90      		pop r4
 539 0294 3F90      		pop r3
 540 0296 0895      		ret
 541               	.LVL27:
 542               	.L39:
 543               	.LBB52:
 544               	.LBB30:
 206:../src/motor.c **** 		return (motor_status & MOTOR_STATUS_DIRECTION);
 545               		.loc 1 206 0
 546 0298 8091 0000 		lds r24,motor_status
 547               	.LBE30:
 548               	.LBE52:
  86:../src/motor.c **** 	motor_status = MOTOR_STATUS_ON | (direction & MOTOR_STATUS_DIRECTION);
 549               		.loc 1 86 0
 550 029c 80E0      		ldi r24,0
 551 029e 00C0      		rjmp .L37
 552               	.LVL28:
 553               	.L12:
 554               	.LBB53:
 135:../src/motor.c **** 		}
 555               		.loc 1 135 0
 556 02a0 C801      		movw r24,r16
 557 02a2 8819      		sub r24,r8
 558 02a4 9909      		sbc r25,r9
 559 02a6 B801      		movw r22,r16
 560 02a8 0E94 0000 		call __udivmodhi4
 561 02ac 8093 2009 		sts 2336,r24
 562 02b0 9093 2109 		sts 2336+1,r25
 563 02b4 00C0      		rjmp .L13
 564               	.LVL29:
 565               	.L44:
 566               	.LBE53:
 567               	.LBB54:
 568               	.LBB48:
 569               	.LBB39:
  14:../src/motor.c **** 		#else
 570               		.loc 1 14 0
 571 02b6 BF92      		push r11
 572 02b8 AF92      		push r10
 573 02ba 0E94 0000 		call printf_P
 574               	.LVL30:
 575 02be 0F90      		pop __tmp_reg__
 576 02c0 0F90      		pop __tmp_reg__
 577 02c2 00C0      		rjmp .L21
 578               	.LVL31:
 579               	.L42:
 580               	.LBE39:
 581               	.LBE48:
 582               	.LBE54:
 583               	.LBB55:
 103:../src/motor.c **** 			mot_dirs[mot] = ((((motorAdjusts[direction][mot]>>15)&0x1)*-2)+1)/**motor_signs[direction][mot]*
 584               		.loc 1 103 0
 585 02c4 4427      		clr r20
 586 02c6 5527      		clr r21
 587 02c8 481B      		sub r20,r24
 588 02ca 590B      		sbc r21,r25
 589 02cc 00C0      		rjmp .L7
 590               	.LVL32:
 591               	.L11:
 592               	.LBE55:
 593               	.LBB56:
 134:../src/motor.c **** 			case 2: TCD0.CNT = ((total_time - current_offset)%total_time); break;
 594               		.loc 1 134 0
 595 02ce C801      		movw r24,r16
 596 02d0 8819      		sub r24,r8
 597 02d2 9909      		sbc r25,r9
 598 02d4 B801      		movw r22,r16
 599 02d6 0E94 0000 		call __udivmodhi4
 600 02da 8093 6008 		sts 2144,r24
 601 02de 9093 6108 		sts 2144+1,r25
 602 02e2 00C0      		rjmp .L13
 603               	.LVL33:
 604               	.L25:
 605               	.LBE56:
 606               	.LBB57:
 607               	.LBB49:
 608               	.LBB40:
  18:../src/motor.c **** 		case 2: TCD0.CTRLB |= TC0_CCBEN_bm; TCD0.CTRLC = 0; TCD0.CTRLA = TC_CLKSEL_DIV1024_gc; break;
 609               		.loc 1 18 0
 610 02e4 8091 4108 		lds r24,2113
 611 02e8 8062      		ori r24,lo8(32)
 612 02ea 8093 4108 		sts 2113,r24
 613 02ee 1092 4208 		sts 2114,__zero_reg__
 614 02f2 5092 4008 		sts 2112,r5
 615 02f6 00C0      		rjmp .L16
 616               	.LVL34:
 617               	.L20:
 618               	.LBE40:
 619               	.LBE49:
 620               	.LBB50:
 621               	.LBB44:
  33:../src/motor.c **** 	}
 622               		.loc 1 33 0
 623 02f8 8091 0109 		lds r24,2305
 624 02fc 8061      		ori r24,lo8(16)
 625 02fe 8093 0109 		sts 2305,r24
 626 0302 1092 0209 		sts 2306,__zero_reg__
 627 0306 87E0      		ldi r24,lo8(7)
 628 0308 8093 0009 		sts 2304,r24
 629 030c 00C0      		rjmp .L23
 630               	.LVL35:
 631               	.L29:
 632               	.LBE44:
 633               	.LBE50:
 634               	.LBE57:
 155:../src/motor.c **** 	return 1;
 635               		.loc 1 155 0 discriminator 1
 636 030e 80E0      		ldi r24,lo8(__c.4886)
 637 0310 90E0      		ldi r25,hi8(__c.4886)
 638 0312 9F93      		push r25
 639 0314 8F93      		push r24
 640 0316 0E94 0000 		call printf_P
 641               	.LVL36:
 642 031a 0F90      		pop __tmp_reg__
 643 031c 0F90      		pop __tmp_reg__
 156:../src/motor.c **** }
 644               		.loc 1 156 0 discriminator 1
 645 031e 81E0      		ldi r24,lo8(1)
 646 0320 00C0      		rjmp .L37
 647               	.LVL37:
 648               	.L19:
 649               	.LBB58:
 650               	.LBB51:
 651               	.LBB45:
  32:../src/motor.c **** 		case 2: TCD0.CTRLB |= TC0_CCAEN_bm; TCD0.CTRLC = 0; TCD0.CTRLA = TC_CLKSEL_DIV1024_gc; break;
 652               		.loc 1 32 0
 653 0322 8091 4108 		lds r24,2113
 654 0326 8061      		ori r24,lo8(16)
 655 0328 8093 4108 		sts 2113,r24
 656 032c 1092 4208 		sts 2114,__zero_reg__
 657 0330 5092 4008 		sts 2112,r5
 658 0334 00C0      		rjmp .L16
 659               	.LBE45:
 660               	.LBE51:
 661               	.LBE58:
 662               		.cfi_endproc
 663               	.LFE39:
 665               	.global	__floatunsisf
 666               	.global	__divsf3
 667               	.global	__fixunssfsi
 668               		.section	.text.walk,"ax",@progbits
 669               	.global	walk
 671               	walk:
 672               	.LFB40:
 160:../src/motor.c **** 	uint16_t mm_per_kilostep = getMMperKilostep(direction);
 673               		.loc 1 160 0
 674               		.cfi_startproc
 675               	.LVL38:
 676 0000 CF92      		push r12
 677               	.LCFI19:
 678               		.cfi_def_cfa_offset 4
 679               		.cfi_offset 12, -3
 680 0002 DF92      		push r13
 681               	.LCFI20:
 682               		.cfi_def_cfa_offset 5
 683               		.cfi_offset 13, -4
 684 0004 EF92      		push r14
 685               	.LCFI21:
 686               		.cfi_def_cfa_offset 6
 687               		.cfi_offset 14, -5
 688 0006 FF92      		push r15
 689               	.LCFI22:
 690               		.cfi_def_cfa_offset 7
 691               		.cfi_offset 15, -6
 692 0008 0F93      		push r16
 693               	.LCFI23:
 694               		.cfi_def_cfa_offset 8
 695               		.cfi_offset 16, -7
 696 000a 1F93      		push r17
 697               	.LCFI24:
 698               		.cfi_def_cfa_offset 9
 699               		.cfi_offset 17, -8
 700 000c CF93      		push r28
 701               	.LCFI25:
 702               		.cfi_def_cfa_offset 10
 703               		.cfi_offset 28, -9
 704 000e DF93      		push r29
 705               	.LCFI26:
 706               		.cfi_def_cfa_offset 11
 707               		.cfi_offset 29, -10
 708               	/* prologue: function */
 709               	/* frame size = 0 */
 710               	/* stack size = 8 */
 711               	.L__stack_usage = 8
 712 0010 182F      		mov r17,r24
 713 0012 EB01      		movw r28,r22
 714               	.LVL39:
 715               	.LBB59:
 716               	.LBB60:
 207:../src/motor.c **** 	}	
 208:../src/motor.c **** 	return -1;
 209:../src/motor.c **** }
 210:../src/motor.c **** 
 211:../src/motor.c **** uint16_t getMMperKilostep(uint8_t direction)
 212:../src/motor.c **** {
 213:../src/motor.c **** 	return mmPerKilostep[direction];
 717               		.loc 1 213 0
 718 0014 E82F      		mov r30,r24
 719 0016 F0E0      		ldi r31,0
 720 0018 EE0F      		lsl r30
 721 001a FF1F      		rol r31
 722 001c E050      		subi r30,lo8(-(mmPerKilostep))
 723 001e F040      		sbci r31,hi8(-(mmPerKilostep))
 724 0020 6081      		ld r22,Z
 725 0022 7181      		ldd r23,Z+1
 726               	.LVL40:
 727               	.LBE60:
 728               	.LBE59:
 162:../src/motor.c **** 		printf_P(PSTR("Error: Don't have calibrated values for this direction.\r\n"));
 729               		.loc 1 162 0
 730 0024 673E      		cpi r22,-25
 731 0026 83E0      		ldi r24,3
 732 0028 7807      		cpc r23,r24
 733               	.LVL41:
 734 002a 04F4      		brge .L50
 162:../src/motor.c **** 		printf_P(PSTR("Error: Don't have calibrated values for this direction.\r\n"));
 735               		.loc 1 162 0 is_stmt 0 discriminator 1
 736 002c 6831      		cpi r22,24
 737 002e 9CEF      		ldi r25,-4
 738 0030 7907      		cpc r23,r25
 739 0032 04F0      		brlt .+2
 740 0034 00C0      		rjmp .L48
 741               	.L50:
 742 0036 80E0      		ldi r24,0
 743 0038 90E0      		ldi r25,0
 744 003a 0E94 0000 		call __floatunsisf
 745               	.LVL42:
 746 003e 20E0      		ldi r18,0
 747 0040 30E0      		ldi r19,0
 748 0042 4AE7      		ldi r20,lo8(122)
 749 0044 54E4      		ldi r21,lo8(68)
 750 0046 0E94 0000 		call __divsf3
 751               	.LVL43:
 752 004a 6B01      		movw r12,r22
 753 004c 7C01      		movw r14,r24
 754               	.L47:
 755               	.LVL44:
 171:../src/motor.c **** 	delayMS(10);
 756               		.loc 1 171 0 is_stmt 1
 757 004e BE01      		movw r22,r28
 758 0050 80E0      		ldi r24,0
 759 0052 90E0      		ldi r25,0
 760 0054 0E94 0000 		call __floatunsisf
 761               	.LVL45:
 762 0058 A701      		movw r20,r14
 763 005a 9601      		movw r18,r12
 764 005c 0E94 0000 		call __divsf3
 765               	.LVL46:
 766 0060 6B01      		movw r12,r22
 767 0062 7C01      		movw r14,r24
 768               	.LVL47:
 172:../src/motor.c **** 	printf_P(PSTR("In order to go in direction %hu for %u mm, taking %u steps.\r\n"),direction, mm, (u
 769               		.loc 1 172 0
 770 0064 8AE0      		ldi r24,lo8(10)
 771 0066 90E0      		ldi r25,0
 772 0068 0E94 0000 		call delayMS
 773               	.LVL48:
 173:../src/motor.c **** 	delayMS(10);
 774               		.loc 1 173 0
 775 006c C701      		movw r24,r14
 776 006e B601      		movw r22,r12
 777 0070 0E94 0000 		call __fixunssfsi
 778               	.LVL49:
 779 0074 F62E      		mov r15,r22
 780 0076 072F      		mov r16,r23
 781 0078 7F93      		push r23
 782               	.LCFI27:
 783               		.cfi_def_cfa_offset 12
 784 007a 6F93      		push r22
 785               	.LCFI28:
 786               		.cfi_def_cfa_offset 13
 787 007c DF93      		push r29
 788               	.LCFI29:
 789               		.cfi_def_cfa_offset 14
 790 007e CF93      		push r28
 791               	.LCFI30:
 792               		.cfi_def_cfa_offset 15
 793 0080 1F92      		push __zero_reg__
 794               	.LCFI31:
 795               		.cfi_def_cfa_offset 16
 796 0082 1F93      		push r17
 797               	.LCFI32:
 798               		.cfi_def_cfa_offset 17
 799 0084 80E0      		ldi r24,lo8(__c.4897)
 800 0086 90E0      		ldi r25,hi8(__c.4897)
 801 0088 9F93      		push r25
 802               	.LCFI33:
 803               		.cfi_def_cfa_offset 18
 804 008a 8F93      		push r24
 805               	.LCFI34:
 806               		.cfi_def_cfa_offset 19
 807 008c 0E94 0000 		call printf_P
 808               	.LVL50:
 174:../src/motor.c **** 	moveSteps(direction, (uint16_t)steps);
 809               		.loc 1 174 0
 810 0090 8AE0      		ldi r24,lo8(10)
 811 0092 90E0      		ldi r25,0
 812 0094 0E94 0000 		call delayMS
 813               	.LVL51:
 175:../src/motor.c **** }
 814               		.loc 1 175 0
 815 0098 8DB7      		in r24,__SP_L__
 816 009a 9EB7      		in r25,__SP_H__
 817 009c 0896      		adiw r24,8
 818 009e 8DBF      		out __SP_L__,r24
 819 00a0 9EBF      		out __SP_H__,r25
 820               	.LCFI35:
 821               		.cfi_def_cfa_offset 11
 822 00a2 6F2D      		mov r22,r15
 823 00a4 702F      		mov r23,r16
 824 00a6 812F      		mov r24,r17
 825               	/* epilogue start */
 176:../src/motor.c **** 
 826               		.loc 1 176 0
 827 00a8 DF91      		pop r29
 828 00aa CF91      		pop r28
 829               	.LVL52:
 830 00ac 1F91      		pop r17
 831               	.LVL53:
 832 00ae 0F91      		pop r16
 833 00b0 FF90      		pop r15
 834 00b2 EF90      		pop r14
 835 00b4 DF90      		pop r13
 836 00b6 CF90      		pop r12
 837               	.LVL54:
 175:../src/motor.c **** }
 838               		.loc 1 175 0
 839 00b8 0C94 0000 		jmp moveSteps
 840               	.LVL55:
 841               	.L48:
 163:../src/motor.c **** 		if(direction>5){
 842               		.loc 1 163 0
 843 00bc 80E0      		ldi r24,lo8(__c.4893)
 844 00be 90E0      		ldi r25,hi8(__c.4893)
 845 00c0 9F93      		push r25
 846               	.LCFI36:
 847               		.cfi_def_cfa_offset 12
 848 00c2 8F93      		push r24
 849               	.LCFI37:
 850               		.cfi_def_cfa_offset 13
 851 00c4 0E94 0000 		call printf_P
 852               	.LVL56:
 164:../src/motor.c **** 			mm_per_kilostep = 2000;
 853               		.loc 1 164 0
 854 00c8 0F90      		pop __tmp_reg__
 855 00ca 0F90      		pop __tmp_reg__
 856               	.LCFI38:
 857               		.cfi_def_cfa_offset 11
 858 00cc 1630      		cpi r17,lo8(6)
 859 00ce 00F4      		brsh .L51
 860 00d0 8AE9      		ldi r24,lo8(-102)
 861 00d2 C82E      		mov r12,r24
 862 00d4 89E9      		ldi r24,lo8(-103)
 863 00d6 D82E      		mov r13,r24
 864 00d8 89E1      		ldi r24,lo8(25)
 865 00da E82E      		mov r14,r24
 866 00dc 8FE3      		ldi r24,lo8(63)
 867 00de F82E      		mov r15,r24
 868 00e0 00C0      		rjmp .L47
 869               	.L51:
 870 00e2 C12C      		mov r12,__zero_reg__
 871 00e4 D12C      		mov r13,__zero_reg__
 872 00e6 E12C      		mov r14,__zero_reg__
 873 00e8 90E4      		ldi r25,lo8(64)
 874 00ea F92E      		mov r15,r25
 875 00ec 00C0      		rjmp .L47
 876               		.cfi_endproc
 877               	.LFE40:
 879               		.section	.text.isMoving,"ax",@progbits
 880               	.global	isMoving
 882               	isMoving:
 883               	.LFB42:
 204:../src/motor.c **** 	if (motor_status & MOTOR_STATUS_ON){
 884               		.loc 1 204 0
 885               		.cfi_startproc
 886               	/* prologue: function */
 887               	/* frame size = 0 */
 888               	/* stack size = 0 */
 889               	.L__stack_usage = 0
 205:../src/motor.c **** 		return (motor_status & MOTOR_STATUS_DIRECTION);
 890               		.loc 1 205 0
 891 0000 8091 0000 		lds r24,motor_status
 892 0004 87FF      		sbrs r24,7
 893 0006 00C0      		rjmp .L54
 206:../src/motor.c **** 	}	
 894               		.loc 1 206 0
 895 0008 8091 0000 		lds r24,motor_status
 896 000c 8770      		andi r24,lo8(7)
 897 000e 0895      		ret
 898               	.L54:
 208:../src/motor.c **** }
 899               		.loc 1 208 0
 900 0010 8FEF      		ldi r24,lo8(-1)
 209:../src/motor.c **** 
 901               		.loc 1 209 0
 902 0012 0895      		ret
 903               		.cfi_endproc
 904               	.LFE42:
 906               		.section	.text.getMMperKilostep,"ax",@progbits
 907               	.global	getMMperKilostep
 909               	getMMperKilostep:
 910               	.LFB43:
 212:../src/motor.c **** 	return mmPerKilostep[direction];
 911               		.loc 1 212 0
 912               		.cfi_startproc
 913               	.LVL57:
 914               	/* prologue: function */
 915               	/* frame size = 0 */
 916               	/* stack size = 0 */
 917               	.L__stack_usage = 0
 918               		.loc 1 213 0
 919 0000 E82F      		mov r30,r24
 920 0002 F0E0      		ldi r31,0
 921 0004 EE0F      		lsl r30
 922 0006 FF1F      		rol r31
 923               	.LVL58:
 924 0008 E050      		subi r30,lo8(-(mmPerKilostep))
 925 000a F040      		sbci r31,hi8(-(mmPerKilostep))
 214:../src/motor.c **** }
 926               		.loc 1 214 0
 927 000c 8081      		ld r24,Z
 928 000e 9181      		ldd r25,Z+1
 929 0010 0895      		ret
 930               		.cfi_endproc
 931               	.LFE43:
 933               		.section	.text.setMMperKilostep,"ax",@progbits
 934               	.global	setMMperKilostep
 936               	setMMperKilostep:
 937               	.LFB44:
 215:../src/motor.c **** 
 216:../src/motor.c **** void setMMperKilostep(uint8_t direction, uint16_t dist)
 217:../src/motor.c **** {
 938               		.loc 1 217 0
 939               		.cfi_startproc
 940               	.LVL59:
 941               	/* prologue: function */
 942               	/* frame size = 0 */
 943               	/* stack size = 0 */
 944               	.L__stack_usage = 0
 218:../src/motor.c **** 	mmPerKilostep[direction] = dist;	
 945               		.loc 1 218 0
 946 0000 E82F      		mov r30,r24
 947 0002 F0E0      		ldi r31,0
 948 0004 EE0F      		lsl r30
 949 0006 FF1F      		rol r31
 950               	.LVL60:
 951 0008 E050      		subi r30,lo8(-(mmPerKilostep))
 952 000a F040      		sbci r31,hi8(-(mmPerKilostep))
 953 000c 6083      		st Z,r22
 954 000e 7183      		std Z+1,r23
 955 0010 0895      		ret
 956               		.cfi_endproc
 957               	.LFE44:
 959               		.section	.text.readMotorSettings,"ax",@progbits
 960               	.global	readMotorSettings
 962               	readMotorSettings:
 963               	.LFB45:
 219:../src/motor.c **** }
 220:../src/motor.c **** 
 221:../src/motor.c **** void readMotorSettings()
 222:../src/motor.c **** {
 964               		.loc 1 222 0
 965               		.cfi_startproc
 966 0000 DF92      		push r13
 967               	.LCFI39:
 968               		.cfi_def_cfa_offset 4
 969               		.cfi_offset 13, -3
 970 0002 EF92      		push r14
 971               	.LCFI40:
 972               		.cfi_def_cfa_offset 5
 973               		.cfi_offset 14, -4
 974 0004 FF92      		push r15
 975               	.LCFI41:
 976               		.cfi_def_cfa_offset 6
 977               		.cfi_offset 15, -5
 978 0006 0F93      		push r16
 979               	.LCFI42:
 980               		.cfi_def_cfa_offset 7
 981               		.cfi_offset 16, -6
 982 0008 1F93      		push r17
 983               	.LCFI43:
 984               		.cfi_def_cfa_offset 8
 985               		.cfi_offset 17, -7
 986 000a CF93      		push r28
 987               	.LCFI44:
 988               		.cfi_def_cfa_offset 9
 989               		.cfi_offset 28, -8
 990 000c DF93      		push r29
 991               	.LCFI45:
 992               		.cfi_def_cfa_offset 10
 993               		.cfi_offset 29, -9
 994               	/* prologue: function */
 995               	/* frame size = 0 */
 996               	/* stack size = 7 */
 997               	.L__stack_usage = 7
 998               	.LVL61:
 999               		.loc 1 222 0
 1000 000e 50E1      		ldi r21,lo8(16)
 1001 0010 E52E      		mov r14,r21
 1002 0012 F12C      		mov r15,__zero_reg__
 1003               	.LVL62:
 1004               	.L58:
 1005 0014 8701      		movw r16,r14
 1006 0016 0050      		subi r16,lo8(-(motorAdjusts-16))
 1007 0018 1040      		sbci r17,hi8(-(motorAdjusts-16))
 1008 001a E701      		movw r28,r14
 1009 001c 2696      		adiw r28,6
 1010               	.LVL63:
 1011               	.L59:
 1012               	.LBB61:
 1013               	.LBB62:
 223:../src/motor.c **** 	for (uint8_t direction = 0; direction < 8; direction++)
 224:../src/motor.c **** 	{
 225:../src/motor.c **** 		for (uint8_t motor_num = 0; motor_num < 3 ; motor_num++)
 226:../src/motor.c **** 		{
 227:../src/motor.c **** 			motorAdjusts[direction][motor_num] = ((((int16_t)EEPROM_read_byte(0x10 + 6*direction + 2*motor_n
 1014               		.loc 1 227 0 discriminator 3
 1015 001e C701      		movw r24,r14
 1016 0020 0E94 0000 		call EEPROM_read_byte
 1017               	.LVL64:
 1018 0024 D82E      		mov r13,r24
 1019 0026 C701      		movw r24,r14
 1020 0028 0196      		adiw r24,1
 1021 002a 0E94 0000 		call EEPROM_read_byte
 1022               	.LVL65:
 1023 002e 2D2D      		mov r18,r13
 1024 0030 30E0      		ldi r19,0
 1025 0032 322F      		mov r19,r18
 1026 0034 2227      		clr r18
 1027 0036 282B      		or r18,r24
 1028 0038 F801      		movw r30,r16
 1029 003a 2193      		st Z+,r18
 1030 003c 3193      		st Z+,r19
 1031 003e 8F01      		movw r16,r30
 1032 0040 F2E0      		ldi r31,2
 1033 0042 EF0E      		add r14,r31
 1034 0044 F11C      		adc r15,__zero_reg__
 225:../src/motor.c **** 		{
 1035               		.loc 1 225 0 discriminator 3
 1036 0046 EC16      		cp r14,r28
 1037 0048 FD06      		cpc r15,r29
 1038 004a 01F4      		brne .L59
 1039 004c 7E01      		movw r14,r28
 1040               	.LBE62:
 223:../src/motor.c **** 	for (uint8_t direction = 0; direction < 8; direction++)
 1041               		.loc 1 223 0 discriminator 2
 1042 004e C034      		cpi r28,64
 1043 0050 D105      		cpc r29,__zero_reg__
 1044 0052 01F4      		brne .L58
 1045 0054 20E0      		ldi r18,lo8(mmPerKilostep)
 1046 0056 E22E      		mov r14,r18
 1047 0058 20E0      		ldi r18,hi8(mmPerKilostep)
 1048 005a F22E      		mov r15,r18
 1049               	.L61:
 1050               	.LBE61:
 1051               	.LBB63:
 228:../src/motor.c **** 		}
 229:../src/motor.c **** 
 230:../src/motor.c **** 	}
 231:../src/motor.c **** 	for (uint8_t direction = 0; direction < 8 ; direction++)
 232:../src/motor.c **** 	{
 233:../src/motor.c **** 		mmPerKilostep[direction] =(uint16_t)EEPROM_read_byte(0x40 + 2*direction + 0)<<8 | (uint16_t)EEPRO
 1052               		.loc 1 233 0 discriminator 3
 1053 005c CE01      		movw r24,r28
 1054 005e 0E94 0000 		call EEPROM_read_byte
 1055               	.LVL66:
 1056 0062 182F      		mov r17,r24
 1057 0064 CE01      		movw r24,r28
 1058 0066 0196      		adiw r24,1
 1059 0068 0E94 0000 		call EEPROM_read_byte
 1060               	.LVL67:
 1061 006c 212F      		mov r18,r17
 1062 006e 30E0      		ldi r19,0
 1063 0070 322F      		mov r19,r18
 1064 0072 2227      		clr r18
 1065 0074 282B      		or r18,r24
 1066 0076 F701      		movw r30,r14
 1067 0078 2193      		st Z+,r18
 1068 007a 3193      		st Z+,r19
 1069 007c 7F01      		movw r14,r30
 1070               	.LVL68:
 1071 007e 2296      		adiw r28,2
 231:../src/motor.c **** 	{
 1072               		.loc 1 231 0 discriminator 3
 1073 0080 C035      		cpi r28,80
 1074 0082 D105      		cpc r29,__zero_reg__
 1075 0084 01F4      		brne .L61
 1076               	/* epilogue start */
 1077               	.LBE63:
 234:../src/motor.c **** 	}
 235:../src/motor.c **** }
 1078               		.loc 1 235 0
 1079 0086 DF91      		pop r29
 1080 0088 CF91      		pop r28
 1081 008a 1F91      		pop r17
 1082 008c 0F91      		pop r16
 1083 008e FF90      		pop r15
 1084 0090 EF90      		pop r14
 1085 0092 DF90      		pop r13
 1086 0094 0895      		ret
 1087               		.cfi_endproc
 1088               	.LFE45:
 1090               		.section	.text.motorInit,"ax",@progbits
 1091               	.global	motorInit
 1093               	motorInit:
 1094               	.LFB38:
  39:../src/motor.c **** 	#ifdef AUDIO_DROPLET
 1095               		.loc 1 39 0
 1096               		.cfi_startproc
 1097 0000 CF93      		push r28
 1098               	.LCFI46:
 1099               		.cfi_def_cfa_offset 4
 1100               		.cfi_offset 28, -3
 1101 0002 DF93      		push r29
 1102               	.LCFI47:
 1103               		.cfi_def_cfa_offset 5
 1104               		.cfi_offset 29, -4
 1105               	/* prologue: function */
 1106               	/* frame size = 0 */
 1107               	/* stack size = 2 */
 1108               	.L__stack_usage = 2
  41:../src/motor.c **** 	#else
 1109               		.loc 1 41 0
 1110 0004 A0E4      		ldi r26,lo8(64)
 1111 0006 B6E0      		ldi r27,lo8(6)
 1112 0008 20E3      		ldi r18,lo8(48)
 1113 000a 1196      		adiw r26,1
 1114 000c 2C93      		st X,r18
 1115 000e 1197      		sbiw r26,1
  45:../src/motor.c **** 
 1116               		.loc 1 45 0
 1117 0010 E0E6      		ldi r30,lo8(96)
 1118 0012 F6E0      		ldi r31,lo8(6)
 1119 0014 83E0      		ldi r24,lo8(3)
 1120 0016 8183      		std Z+1,r24
  52:../src/motor.c ****     TCC1.CTRLB = TC_WGMODE_SS_gc;
 1121               		.loc 1 52 0
 1122 0018 C0E4      		ldi r28,lo8(64)
 1123 001a D8E0      		ldi r29,lo8(8)
 1124 001c 1882      		st Y,__zero_reg__
  53:../src/motor.c **** 
 1125               		.loc 1 53 0
 1126 001e 8983      		std Y+1,r24
  55:../src/motor.c ****     TCD0.CTRLB = TC_WGMODE_SS_gc;  
 1127               		.loc 1 55 0
 1128 0020 C0E0      		ldi r28,0
 1129 0022 D9E0      		ldi r29,lo8(9)
 1130 0024 1882      		st Y,__zero_reg__
  56:../src/motor.c **** 	
 1131               		.loc 1 56 0
 1132 0026 8983      		std Y+1,r24
  62:../src/motor.c **** 	PORTC.PIN5CTRL = PORT_INVEN_bm;
 1133               		.loc 1 62 0
 1134 0028 90E4      		ldi r25,lo8(64)
 1135 002a 5496      		adiw r26,20
 1136 002c 9C93      		st X,r25
 1137 002e 5497      		sbiw r26,20
  63:../src/motor.c **** 	PORTD.PIN0CTRL = PORT_INVEN_bm;
 1138               		.loc 1 63 0
 1139 0030 5596      		adiw r26,21
 1140 0032 9C93      		st X,r25
 1141 0034 5597      		sbiw r26,21
  64:../src/motor.c **** 	PORTD.PIN1CTRL = PORT_INVEN_bm;
 1142               		.loc 1 64 0
 1143 0036 908B      		std Z+16,r25
  65:../src/motor.c **** 	
 1144               		.loc 1 65 0
 1145 0038 918B      		std Z+17,r25
  70:../src/motor.c **** 	PORTD.OUTCLR = PIN0_bm | PIN1_bm;
 1146               		.loc 1 70 0
 1147 003a 1696      		adiw r26,6
 1148 003c 2C93      		st X,r18
  71:../src/motor.c **** 
 1149               		.loc 1 71 0
 1150 003e 8683      		std Z+6,r24
  73:../src/motor.c **** 
 1151               		.loc 1 73 0
 1152 0040 1092 0000 		sts motor_status,__zero_reg__
  75:../src/motor.c **** 	motor_off_time = MOTOR_OFF_TIME;
 1153               		.loc 1 75 0
 1154 0044 84E1      		ldi r24,lo8(20)
 1155 0046 90E0      		ldi r25,0
 1156 0048 8093 0000 		sts motor_on_time,r24
 1157 004c 9093 0000 		sts motor_on_time+1,r25
  76:../src/motor.c **** 	
 1158               		.loc 1 76 0
 1159 0050 88E2      		ldi r24,lo8(40)
 1160 0052 90E0      		ldi r25,0
 1161 0054 8093 0000 		sts motor_off_time,r24
 1162 0058 9093 0000 		sts motor_off_time+1,r25
 1163               	/* epilogue start */
  79:../src/motor.c **** 
 1164               		.loc 1 79 0
 1165 005c DF91      		pop r29
 1166 005e CF91      		pop r28
  78:../src/motor.c **** }
 1167               		.loc 1 78 0
 1168 0060 0C94 0000 		jmp readMotorSettings
 1169               	.LVL69:
 1170               		.cfi_endproc
 1171               	.LFE38:
 1173               		.section	.text.writeMotorSettings,"ax",@progbits
 1174               	.global	writeMotorSettings
 1176               	writeMotorSettings:
 1177               	.LFB46:
 236:../src/motor.c **** 
 237:../src/motor.c **** void writeMotorSettings()
 238:../src/motor.c **** {
 1178               		.loc 1 238 0
 1179               		.cfi_startproc
 1180 0000 DF92      		push r13
 1181               	.LCFI48:
 1182               		.cfi_def_cfa_offset 4
 1183               		.cfi_offset 13, -3
 1184 0002 EF92      		push r14
 1185               	.LCFI49:
 1186               		.cfi_def_cfa_offset 5
 1187               		.cfi_offset 14, -4
 1188 0004 FF92      		push r15
 1189               	.LCFI50:
 1190               		.cfi_def_cfa_offset 6
 1191               		.cfi_offset 15, -5
 1192 0006 0F93      		push r16
 1193               	.LCFI51:
 1194               		.cfi_def_cfa_offset 7
 1195               		.cfi_offset 16, -6
 1196 0008 1F93      		push r17
 1197               	.LCFI52:
 1198               		.cfi_def_cfa_offset 8
 1199               		.cfi_offset 17, -7
 1200 000a CF93      		push r28
 1201               	.LCFI53:
 1202               		.cfi_def_cfa_offset 9
 1203               		.cfi_offset 28, -8
 1204 000c DF93      		push r29
 1205               	.LCFI54:
 1206               		.cfi_def_cfa_offset 10
 1207               		.cfi_offset 29, -9
 1208               	/* prologue: function */
 1209               	/* frame size = 0 */
 1210               	/* stack size = 7 */
 1211               	.L__stack_usage = 7
 1212               	.LVL70:
 1213               		.loc 1 238 0
 1214 000e C0E1      		ldi r28,lo8(16)
 1215 0010 D0E0      		ldi r29,0
 1216               	.LVL71:
 1217               	.L66:
 1218 0012 8E01      		movw r16,r28
 1219 0014 0050      		subi r16,lo8(-(motorAdjusts-16))
 1220 0016 1040      		sbci r17,hi8(-(motorAdjusts-16))
 1221 0018 7E01      		movw r14,r28
 1222 001a 86E0      		ldi r24,6
 1223 001c E80E      		add r14,r24
 1224 001e F11C      		adc r15,__zero_reg__
 1225               	.LVL72:
 1226               	.L67:
 1227               	.LBB64:
 1228               	.LBB65:
 1229               	.LBB66:
 239:../src/motor.c **** 	for (uint8_t direction = 0; direction < 8; direction++)
 240:../src/motor.c **** 	{
 241:../src/motor.c **** 		for (uint8_t motor_num = 0; motor_num < 3 ; motor_num++)
 242:../src/motor.c **** 		{
 243:../src/motor.c **** 			int16_t temp = motorAdjusts[direction][motor_num];
 1230               		.loc 1 243 0 discriminator 3
 1231 0020 F801      		movw r30,r16
 1232 0022 D080      		ld r13,Z
 1233 0024 6181      		ldd r22,Z+1
 1234 0026 0E5F      		subi r16,-2
 1235 0028 1F4F      		sbci r17,-1
 1236               	.LVL73:
 244:../src/motor.c **** 			EEPROM_write_byte(0x10 + 6*direction + 2*motor_num + 0, (uint8_t)((temp>>8)&0xFF));
 1237               		.loc 1 244 0 discriminator 3
 1238 002a CE01      		movw r24,r28
 1239 002c 0E94 0000 		call EEPROM_write_byte
 1240               	.LVL74:
 245:../src/motor.c **** 			EEPROM_write_byte(0x10 + 6*direction + 2*motor_num + 1, (uint8_t)(temp&0xFF));
 1241               		.loc 1 245 0 discriminator 3
 1242 0030 6D2D      		mov r22,r13
 1243 0032 CE01      		movw r24,r28
 1244 0034 0196      		adiw r24,1
 1245 0036 0E94 0000 		call EEPROM_write_byte
 1246               	.LVL75:
 1247 003a 2296      		adiw r28,2
 1248               	.LBE66:
 241:../src/motor.c **** 		{
 1249               		.loc 1 241 0 discriminator 3
 1250 003c CE15      		cp r28,r14
 1251 003e DF05      		cpc r29,r15
 1252 0040 01F4      		brne .L67
 1253 0042 E701      		movw r28,r14
 1254               	.LBE65:
 239:../src/motor.c **** 	{
 1255               		.loc 1 239 0 discriminator 2
 1256 0044 F0E4      		ldi r31,64
 1257 0046 EF16      		cp r14,r31
 1258 0048 F104      		cpc r15,__zero_reg__
 1259 004a 01F4      		brne .L66
 1260 004c C0E0      		ldi r28,lo8(mmPerKilostep)
 1261 004e D0E0      		ldi r29,hi8(mmPerKilostep)
 1262               	.L69:
 1263               	.LBE64:
 1264               	.LBB67:
 1265               	.LBB68:
 246:../src/motor.c **** 		}
 247:../src/motor.c **** 	}
 248:../src/motor.c **** 	
 249:../src/motor.c **** 	for (uint8_t direction = 0; direction < 8; direction++)
 250:../src/motor.c **** 	{
 251:../src/motor.c **** 		uint16_t temp = mmPerKilostep[direction];
 1266               		.loc 1 251 0 discriminator 3
 1267 0050 1881      		ld r17,Y
 1268 0052 6981      		ldd r22,Y+1
 1269 0054 2296      		adiw r28,2
 1270               	.LVL76:
 252:../src/motor.c **** 		EEPROM_write_byte(0x40 + 2*direction + 0, (uint8_t)((temp>>8)&0xFF));
 1271               		.loc 1 252 0 discriminator 3
 1272 0056 C701      		movw r24,r14
 1273 0058 0E94 0000 		call EEPROM_write_byte
 1274               	.LVL77:
 253:../src/motor.c **** 		EEPROM_write_byte(0x40 + 2*direction + 1, (uint8_t)(temp&0xFF));
 1275               		.loc 1 253 0 discriminator 3
 1276 005c 612F      		mov r22,r17
 1277 005e C701      		movw r24,r14
 1278 0060 0196      		adiw r24,1
 1279 0062 0E94 0000 		call EEPROM_write_byte
 1280               	.LVL78:
 1281 0066 E2E0      		ldi r30,2
 1282 0068 EE0E      		add r14,r30
 1283 006a F11C      		adc r15,__zero_reg__
 1284               	.LBE68:
 249:../src/motor.c **** 	{
 1285               		.loc 1 249 0 discriminator 3
 1286 006c F0E5      		ldi r31,80
 1287 006e EF16      		cp r14,r31
 1288 0070 F104      		cpc r15,__zero_reg__
 1289 0072 01F4      		brne .L69
 1290               	/* epilogue start */
 1291               	.LBE67:
 254:../src/motor.c **** 	}
 255:../src/motor.c **** }
 1292               		.loc 1 255 0
 1293 0074 DF91      		pop r29
 1294 0076 CF91      		pop r28
 1295 0078 1F91      		pop r17
 1296 007a 0F91      		pop r16
 1297 007c FF90      		pop r15
 1298 007e EF90      		pop r14
 1299 0080 DF90      		pop r13
 1300 0082 0895      		ret
 1301               		.cfi_endproc
 1302               	.LFE46:
 1304               		.section	.rodata.str1.1,"aMS",@progbits,1
 1305               	.LC0:
 1306 0000 2564 0900 		.string	"%d\t"
 1307               	.LC1:
 1308 0004 0D00      		.string	"\r"
 1309               		.section	.text.printMotorValues,"ax",@progbits
 1310               	.global	printMotorValues
 1312               	printMotorValues:
 1313               	.LFB47:
 256:../src/motor.c **** 
 257:../src/motor.c **** void printMotorValues()
 258:../src/motor.c **** {
 1314               		.loc 1 258 0
 1315               		.cfi_startproc
 1316 0000 8F92      		push r8
 1317               	.LCFI55:
 1318               		.cfi_def_cfa_offset 4
 1319               		.cfi_offset 8, -3
 1320 0002 9F92      		push r9
 1321               	.LCFI56:
 1322               		.cfi_def_cfa_offset 5
 1323               		.cfi_offset 9, -4
 1324 0004 AF92      		push r10
 1325               	.LCFI57:
 1326               		.cfi_def_cfa_offset 6
 1327               		.cfi_offset 10, -5
 1328 0006 BF92      		push r11
 1329               	.LCFI58:
 1330               		.cfi_def_cfa_offset 7
 1331               		.cfi_offset 11, -6
 1332 0008 CF92      		push r12
 1333               	.LCFI59:
 1334               		.cfi_def_cfa_offset 8
 1335               		.cfi_offset 12, -7
 1336 000a DF92      		push r13
 1337               	.LCFI60:
 1338               		.cfi_def_cfa_offset 9
 1339               		.cfi_offset 13, -8
 1340 000c EF92      		push r14
 1341               	.LCFI61:
 1342               		.cfi_def_cfa_offset 10
 1343               		.cfi_offset 14, -9
 1344 000e FF92      		push r15
 1345               	.LCFI62:
 1346               		.cfi_def_cfa_offset 11
 1347               		.cfi_offset 15, -10
 1348 0010 1F93      		push r17
 1349               	.LCFI63:
 1350               		.cfi_def_cfa_offset 12
 1351               		.cfi_offset 17, -11
 1352 0012 CF93      		push r28
 1353               	.LCFI64:
 1354               		.cfi_def_cfa_offset 13
 1355               		.cfi_offset 28, -12
 1356 0014 DF93      		push r29
 1357               	.LCFI65:
 1358               		.cfi_def_cfa_offset 14
 1359               		.cfi_offset 29, -13
 1360               	/* prologue: function */
 1361               	/* frame size = 0 */
 1362               	/* stack size = 11 */
 1363               	.L__stack_usage = 11
 259:../src/motor.c **** 	printf_P(PSTR("Motor Values\r\n"));
 1364               		.loc 1 259 0
 1365 0016 80E0      		ldi r24,lo8(__c.4942)
 1366 0018 90E0      		ldi r25,hi8(__c.4942)
 1367 001a 9F93      		push r25
 1368               	.LCFI66:
 1369               		.cfi_def_cfa_offset 15
 1370 001c 8F93      		push r24
 1371               	.LCFI67:
 1372               		.cfi_def_cfa_offset 16
 1373 001e 0E94 0000 		call printf_P
 1374               	.LVL79:
 1375 0022 80E0      		ldi r24,lo8(motorAdjusts)
 1376 0024 A82E      		mov r10,r24
 1377 0026 80E0      		ldi r24,hi8(motorAdjusts)
 1378 0028 B82E      		mov r11,r24
 1379 002a 0F90      		pop __tmp_reg__
 1380 002c 0F90      		pop __tmp_reg__
 1381               	.LCFI68:
 1382               		.cfi_def_cfa_offset 14
 1383 002e C12C      		mov r12,__zero_reg__
 1384 0030 D12C      		mov r13,__zero_reg__
 1385               	.LBB69:
 260:../src/motor.c **** 	for(uint8_t direction=0;direction<8;direction++)
 261:../src/motor.c **** 	{
 262:../src/motor.c **** 		printf_P(PSTR("\tdir: %hu\t"),direction);
 1386               		.loc 1 262 0
 1387 0032 90E0      		ldi r25,lo8(__c.4945)
 1388 0034 892E      		mov r8,r25
 1389 0036 90E0      		ldi r25,hi8(__c.4945)
 1390 0038 992E      		mov r9,r25
 1391               	.LBB70:
 263:../src/motor.c **** 		for(uint8_t motor=0;motor<3;motor++)
 264:../src/motor.c **** 		{
 265:../src/motor.c **** 			printf("%d\t", motorAdjusts[direction][motor]);
 1392               		.loc 1 265 0
 1393 003a 20E0      		ldi r18,lo8(.LC0)
 1394 003c E22E      		mov r14,r18
 1395 003e 20E0      		ldi r18,hi8(.LC0)
 1396 0040 F22E      		mov r15,r18
 1397               	.LVL80:
 1398               	.L74:
 1399               	.LBE70:
 262:../src/motor.c **** 		for(uint8_t motor=0;motor<3;motor++)
 1400               		.loc 1 262 0
 1401 0042 DF92      		push r13
 1402               	.LCFI69:
 1403               		.cfi_def_cfa_offset 15
 1404 0044 CF92      		push r12
 1405               	.LCFI70:
 1406               		.cfi_def_cfa_offset 16
 1407 0046 9F92      		push r9
 1408               	.LCFI71:
 1409               		.cfi_def_cfa_offset 17
 1410 0048 8F92      		push r8
 1411               	.LCFI72:
 1412               		.cfi_def_cfa_offset 18
 1413 004a 0E94 0000 		call printf_P
 1414               	.LVL81:
 1415 004e 0F90      		pop __tmp_reg__
 1416 0050 0F90      		pop __tmp_reg__
 1417 0052 0F90      		pop __tmp_reg__
 1418 0054 0F90      		pop __tmp_reg__
 1419               	.LCFI73:
 1420               		.cfi_def_cfa_offset 14
 1421 0056 E501      		movw r28,r10
 1422 0058 13E0      		ldi r17,lo8(3)
 1423               	.LVL82:
 1424               	.L73:
 1425               	.LBB71:
 1426               		.loc 1 265 0 discriminator 3
 1427 005a 8881      		ld r24,Y
 1428 005c 9981      		ldd r25,Y+1
 1429 005e 2296      		adiw r28,2
 1430 0060 9F93      		push r25
 1431               	.LCFI74:
 1432               		.cfi_def_cfa_offset 15
 1433 0062 8F93      		push r24
 1434               	.LCFI75:
 1435               		.cfi_def_cfa_offset 16
 1436 0064 FF92      		push r15
 1437               	.LCFI76:
 1438               		.cfi_def_cfa_offset 17
 1439 0066 EF92      		push r14
 1440               	.LCFI77:
 1441               		.cfi_def_cfa_offset 18
 1442 0068 0E94 0000 		call printf
 1443               	.LVL83:
 1444 006c 1150      		subi r17,lo8(-(-1))
 1445               	.LVL84:
 263:../src/motor.c **** 		for(uint8_t motor=0;motor<3;motor++)
 1446               		.loc 1 263 0 discriminator 3
 1447 006e 0F90      		pop __tmp_reg__
 1448 0070 0F90      		pop __tmp_reg__
 1449 0072 0F90      		pop __tmp_reg__
 1450 0074 0F90      		pop __tmp_reg__
 1451               	.LCFI78:
 1452               		.cfi_def_cfa_offset 14
 1453 0076 01F4      		brne .L73
 1454               	.LBE71:
 266:../src/motor.c **** 		}
 267:../src/motor.c **** 		printf("\r\n");
 1455               		.loc 1 267 0 discriminator 2
 1456 0078 80E0      		ldi r24,lo8(.LC1)
 1457 007a 90E0      		ldi r25,hi8(.LC1)
 1458 007c 0E94 0000 		call puts
 1459               	.LVL85:
 1460 0080 8FEF      		ldi r24,-1
 1461 0082 C81A      		sub r12,r24
 1462 0084 D80A      		sbc r13,r24
 1463               	.LVL86:
 1464 0086 86E0      		ldi r24,6
 1465 0088 A80E      		add r10,r24
 1466 008a B11C      		adc r11,__zero_reg__
 260:../src/motor.c **** 	{
 1467               		.loc 1 260 0 discriminator 2
 1468 008c 88E0      		ldi r24,8
 1469 008e C816      		cp r12,r24
 1470 0090 D104      		cpc r13,__zero_reg__
 1471 0092 01F4      		brne .L74
 1472               	.LBE69:
 268:../src/motor.c **** 	}
 269:../src/motor.c **** 	printf("\r\n");
 1473               		.loc 1 269 0
 1474 0094 80E0      		ldi r24,lo8(.LC1)
 1475 0096 90E0      		ldi r25,hi8(.LC1)
 1476               	/* epilogue start */
 270:../src/motor.c **** }
 1477               		.loc 1 270 0
 1478 0098 DF91      		pop r29
 1479 009a CF91      		pop r28
 1480 009c 1F91      		pop r17
 1481               	.LVL87:
 1482 009e FF90      		pop r15
 1483 00a0 EF90      		pop r14
 1484 00a2 DF90      		pop r13
 1485 00a4 CF90      		pop r12
 1486               	.LVL88:
 1487 00a6 BF90      		pop r11
 1488 00a8 AF90      		pop r10
 1489 00aa 9F90      		pop r9
 1490 00ac 8F90      		pop r8
 269:../src/motor.c **** }
 1491               		.loc 1 269 0
 1492 00ae 0C94 0000 		jmp puts
 1493               	.LVL89:
 1494               		.cfi_endproc
 1495               	.LFE47:
 1497               		.section	.text.broadcastMotorAdjusts,"ax",@progbits
 1498               	.global	broadcastMotorAdjusts
 1500               	broadcastMotorAdjusts:
 1501               	.LFB48:
 271:../src/motor.c **** void broadcastMotorAdjusts()
 272:../src/motor.c **** {
 1502               		.loc 1 272 0
 1503               		.cfi_startproc
 1504               	/* prologue: function */
 1505               	/* frame size = 0 */
 1506               	/* stack size = 0 */
 1507               	.L__stack_usage = 0
 1508 0000 0895      		ret
 1509               		.cfi_endproc
 1510               	.LFE48:
 1512               		.section	.text.printDistPerStep,"ax",@progbits
 1513               	.global	printDistPerStep
 1515               	printDistPerStep:
 1516               	.LFB49:
 273:../src/motor.c **** 	// TODO: Deprecated?
 274:../src/motor.c **** }
 275:../src/motor.c **** 
 276:../src/motor.c **** void printDistPerStep()
 277:../src/motor.c **** {
 1517               		.loc 1 277 0
 1518               		.cfi_startproc
 1519               		.loc 1 277 0
 1520 0000 EF92      		push r14
 1521               	.LCFI79:
 1522               		.cfi_def_cfa_offset 4
 1523               		.cfi_offset 14, -3
 1524 0002 FF92      		push r15
 1525               	.LCFI80:
 1526               		.cfi_def_cfa_offset 5
 1527               		.cfi_offset 15, -4
 1528 0004 0F93      		push r16
 1529               	.LCFI81:
 1530               		.cfi_def_cfa_offset 6
 1531               		.cfi_offset 16, -5
 1532 0006 1F93      		push r17
 1533               	.LCFI82:
 1534               		.cfi_def_cfa_offset 7
 1535               		.cfi_offset 17, -6
 1536 0008 CF93      		push r28
 1537               	.LCFI83:
 1538               		.cfi_def_cfa_offset 8
 1539               		.cfi_offset 28, -7
 1540 000a DF93      		push r29
 1541               	.LCFI84:
 1542               		.cfi_def_cfa_offset 9
 1543               		.cfi_offset 29, -8
 1544               	/* prologue: function */
 1545               	/* frame size = 0 */
 1546               	/* stack size = 6 */
 1547               	.L__stack_usage = 6
 278:../src/motor.c **** 	printf_P(PSTR("Dist (mm) per kilostep\r\n"));
 1548               		.loc 1 278 0
 1549 000c 80E0      		ldi r24,lo8(__c.4958)
 1550 000e 90E0      		ldi r25,hi8(__c.4958)
 1551 0010 9F93      		push r25
 1552               	.LCFI85:
 1553               		.cfi_def_cfa_offset 10
 1554 0012 8F93      		push r24
 1555               	.LCFI86:
 1556               		.cfi_def_cfa_offset 11
 1557 0014 0E94 0000 		call printf_P
 1558               	.LVL90:
 1559 0018 00E0      		ldi r16,lo8(mmPerKilostep)
 1560 001a 10E0      		ldi r17,hi8(mmPerKilostep)
 1561 001c 0F90      		pop __tmp_reg__
 1562 001e 0F90      		pop __tmp_reg__
 1563               	.LCFI87:
 1564               		.cfi_def_cfa_offset 9
 1565 0020 C0E0      		ldi r28,0
 1566 0022 D0E0      		ldi r29,0
 1567               	.LBB72:
 279:../src/motor.c **** 	for(uint8_t direction = 0 ; direction<8; direction++)
 280:../src/motor.c **** 	{
 281:../src/motor.c **** 		printf_P(PSTR("\t%hu\t%u\r\n"), direction, mmPerKilostep[direction]);	
 1568               		.loc 1 281 0
 1569 0024 80E0      		ldi r24,lo8(__c.4961)
 1570 0026 E82E      		mov r14,r24
 1571 0028 80E0      		ldi r24,hi8(__c.4961)
 1572 002a F82E      		mov r15,r24
 1573               	.LVL91:
 1574               	.L79:
 1575               		.loc 1 281 0 is_stmt 0 discriminator 3
 1576 002c F801      		movw r30,r16
 1577 002e 8081      		ld r24,Z
 1578 0030 9181      		ldd r25,Z+1
 1579 0032 0E5F      		subi r16,-2
 1580 0034 1F4F      		sbci r17,-1
 1581 0036 9F93      		push r25
 1582               	.LCFI88:
 1583               		.cfi_def_cfa_offset 10
 1584 0038 8F93      		push r24
 1585               	.LCFI89:
 1586               		.cfi_def_cfa_offset 11
 1587 003a DF93      		push r29
 1588               	.LCFI90:
 1589               		.cfi_def_cfa_offset 12
 1590 003c CF93      		push r28
 1591               	.LCFI91:
 1592               		.cfi_def_cfa_offset 13
 1593 003e FF92      		push r15
 1594               	.LCFI92:
 1595               		.cfi_def_cfa_offset 14
 1596 0040 EF92      		push r14
 1597               	.LCFI93:
 1598               		.cfi_def_cfa_offset 15
 1599 0042 0E94 0000 		call printf_P
 1600               	.LVL92:
 1601 0046 2196      		adiw r28,1
 1602               	.LVL93:
 279:../src/motor.c **** 	for(uint8_t direction = 0 ; direction<8; direction++)
 1603               		.loc 1 279 0 is_stmt 1 discriminator 3
 1604 0048 0F90      		pop __tmp_reg__
 1605 004a 0F90      		pop __tmp_reg__
 1606 004c 0F90      		pop __tmp_reg__
 1607 004e 0F90      		pop __tmp_reg__
 1608 0050 0F90      		pop __tmp_reg__
 1609 0052 0F90      		pop __tmp_reg__
 1610               	.LCFI94:
 1611               		.cfi_def_cfa_offset 9
 1612 0054 C830      		cpi r28,8
 1613 0056 D105      		cpc r29,__zero_reg__
 1614 0058 01F4      		brne .L79
 1615               	/* epilogue start */
 1616               	.LBE72:
 282:../src/motor.c **** 	}
 283:../src/motor.c **** }
 1617               		.loc 1 283 0
 1618 005a DF91      		pop r29
 1619 005c CF91      		pop r28
 1620               	.LVL94:
 1621 005e 1F91      		pop r17
 1622 0060 0F91      		pop r16
 1623 0062 FF90      		pop r15
 1624 0064 EF90      		pop r14
 1625 0066 0895      		ret
 1626               		.cfi_endproc
 1627               	.LFE49:
 1629               		.section	.progmem.data.__c.4961,"a",@progbits
 1632               	__c.4961:
 1633 0000 0925 6875 		.string	"\t%hu\t%u\r\n"
 1633      0925 750D 
 1633      0A00 
 1634               		.section	.progmem.data.__c.4958,"a",@progbits
 1637               	__c.4958:
 1638 0000 4469 7374 		.string	"Dist (mm) per kilostep\r\n"
 1638      2028 6D6D 
 1638      2920 7065 
 1638      7220 6B69 
 1638      6C6F 7374 
 1639               		.section	.progmem.data.__c.4945,"a",@progbits
 1642               	__c.4945:
 1643 0000 0964 6972 		.string	"\tdir: %hu\t"
 1643      3A20 2568 
 1643      7509 00
 1644               		.section	.progmem.data.__c.4942,"a",@progbits
 1647               	__c.4942:
 1648 0000 4D6F 746F 		.string	"Motor Values\r\n"
 1648      7220 5661 
 1648      6C75 6573 
 1648      0D0A 00
 1649               		.section	.progmem.data.__c.4897,"a",@progbits
 1652               	__c.4897:
 1653 0000 496E 206F 		.string	"In order to go in direction %hu for %u mm, taking %u steps.\r\n"
 1653      7264 6572 
 1653      2074 6F20 
 1653      676F 2069 
 1653      6E20 6469 
 1654               		.section	.progmem.data.__c.4893,"a",@progbits
 1657               	__c.4893:
 1658 0000 4572 726F 		.string	"Error: Don't have calibrated values for this direction.\r\n"
 1658      723A 2044 
 1658      6F6E 2774 
 1658      2068 6176 
 1658      6520 6361 
 1659               		.section	.progmem.data.__c.4839,"a",@progbits
 1662               	__c.4839:
 1663 0000 4552 524F 		.string	"ERROR! motor_fw called with num=0\r\n"
 1663      5221 206D 
 1663      6F74 6F72 
 1663      5F66 7720 
 1663      6361 6C6C 
 1664               		.section	.progmem.data.__c.4848,"a",@progbits
 1667               	__c.4848:
 1668 0000 4552 524F 		.string	"ERROR! motor_bw called with num=0\r\n"
 1668      5221 206D 
 1668      6F74 6F72 
 1668      5F62 7720 
 1668      6361 6C6C 
 1669               		.section	.progmem.data.__c.4886,"a",@progbits
 1672               	__c.4886:
 1673 0000 4572 726F 		.string	"Error! Failed to schedule stop_move task."
 1673      7221 2046 
 1673      6169 6C65 
 1673      6420 746F 
 1673      2073 6368 
 1674               		.section	.progmem.data.__c.4879,"a",@progbits
 1677               	__c.4879:
 1678 0000 4552 524F 		.string	"ERROR: current_offset: %u and total_time: %u not equal!\r\n"
 1678      523A 2063 
 1678      7572 7265 
 1678      6E74 5F6F 
 1678      6666 7365 
 1679               		.section	.progmem.data.__c.4871,"a",@progbits
 1682               	__c.4871:
 1683 0000 4552 524F 		.string	"ERROR! In move_steps, mot_durs[0]!=0\r\n"
 1683      5221 2049 
 1683      6E20 6D6F 
 1683      7665 5F73 
 1683      7465 7073 
 1684               		.section	.bss.motor_off_time,"aw",@nobits
 1687               	motor_off_time:
 1688 0000 0000      		.zero	2
 1689               		.section	.bss.motor_on_time,"aw",@nobits
 1692               	motor_on_time:
 1693 0000 0000      		.zero	2
 1694               		.section	.bss.current_motor_task,"aw",@nobits
 1697               	current_motor_task:
 1698 0000 0000      		.zero	2
 1699               		.section	.bss.motor_status,"aw",@nobits
 1702               	motor_status:
 1703 0000 00        		.zero	1
 1704               		.comm	mmPerKilostep,16,1
 1705               		.comm	motorAdjusts,48,1
 1706               		.section	.bss.task_storage_arr,"aw",@nobits
 1709               	task_storage_arr:
 1710 0000 0000 0000 		.zero	140
 1710      0000 0000 
 1710      0000 0000 
 1710      0000 0000 
 1710      0000 0000 
 1711               		.comm	task_executing,1,1
 1712               		.comm	num_tasks,1,1
 1713               		.comm	task_list,2,1
 1714               		.comm	rtc_epoch,2,1
 1715               		.comm	droplet_ID,2,1
 1716               		.text
 1717               	.Letext0:
 1718               		.file 2 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 1719               		.file 3 "C:/Program Files (x86)/Atmel/Studio/7.0/packs/atmel/XMEGAA_DFP/1.1.68/include/avr/iox128a
 1720               		.file 4 "../include/droplet_base.h"
 1721               		.file 5 "../include/scheduler.h"
 1722               		.file 6 "../include/motor.h"
 1723               		.file 7 "c:\\program files (x86)\\atmel\\studio\\7.0\\toolchain\\avr8\\avr8-gnu-toolchain\\avr\\in
 1724               		.file 8 "../include/eeprom_driver.h"
 1725               		.file 9 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 motor.c
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:2      *ABS*:0000003e __SP_H__
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:3      *ABS*:0000003d __SP_L__
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:4      *ABS*:0000003f __SREG__
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:5      *ABS*:0000003b __RAMPZ__
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:6      *ABS*:00000034 __CCP__
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:7      *ABS*:00000000 __tmp_reg__
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:8      *ABS*:00000001 __zero_reg__
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:15     .text.stopMove:00000000 stopMove
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1702   .bss.motor_status:00000000 motor_status
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1697   .bss.current_motor_task:00000000 current_motor_task
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:63     .text.moveSteps:00000000 moveSteps
                            *COM*:00000030 motorAdjusts
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1692   .bss.motor_on_time:00000000 motor_on_time
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1687   .bss.motor_off_time:00000000 motor_off_time
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1682   .progmem.data.__c.4871:00000000 __c.4871
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1677   .progmem.data.__c.4879:00000000 __c.4879
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1662   .progmem.data.__c.4839:00000000 __c.4839
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1667   .progmem.data.__c.4848:00000000 __c.4848
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1672   .progmem.data.__c.4886:00000000 __c.4886
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:671    .text.walk:00000000 walk
                            *COM*:00000010 mmPerKilostep
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1652   .progmem.data.__c.4897:00000000 __c.4897
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1657   .progmem.data.__c.4893:00000000 __c.4893
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:882    .text.isMoving:00000000 isMoving
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:909    .text.getMMperKilostep:00000000 getMMperKilostep
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:936    .text.setMMperKilostep:00000000 setMMperKilostep
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:962    .text.readMotorSettings:00000000 readMotorSettings
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1093   .text.motorInit:00000000 motorInit
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1176   .text.writeMotorSettings:00000000 writeMotorSettings
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1312   .text.printMotorValues:00000000 printMotorValues
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1647   .progmem.data.__c.4942:00000000 __c.4942
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1642   .progmem.data.__c.4945:00000000 __c.4945
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1500   .text.broadcastMotorAdjusts:00000000 broadcastMotorAdjusts
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1515   .text.printDistPerStep:00000000 printDistPerStep
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1637   .progmem.data.__c.4958:00000000 __c.4958
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1632   .progmem.data.__c.4961:00000000 __c.4961
C:\Users\kedar\AppData\Local\Temp\ccXJIUJ2.s:1709   .bss.task_storage_arr:00000000 task_storage_arr
                            *COM*:00000001 task_executing
                            *COM*:00000001 num_tasks
                            *COM*:00000002 task_list
                            *COM*:00000002 rtc_epoch
                            *COM*:00000002 droplet_ID

UNDEFINED SYMBOLS
removeTask
printf_P
__umulhisi3
scheduleTask
__udivmodhi4
__floatunsisf
__divsf3
__fixunssfsi
delayMS
EEPROM_read_byte
EEPROM_write_byte
printf
puts
__do_copy_data
__do_clear_bss
